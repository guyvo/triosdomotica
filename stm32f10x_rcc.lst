
C:\cortex\gateway\stm32f10x_rcc.o:     file format elf32-littlearm
C:\cortex\gateway\stm32f10x_rcc.o

Disassembly of section .text.RCC_DeInit:

00000000 <RCC_DeInit>:
RCC_DeInit():
C:\cortex\gateway\src/stm32f10x_rcc.c:127
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
   0:	4a0d      	ldr	r2, [pc, #52]	(38 <RCC_DeInit+0x38>)
   2:	6813      	ldr	r3, [r2, #0]
   4:	f043 0301 	orr.w	r3, r3, #1	; 0x1
   8:	6013      	str	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:130

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
   a:	6851      	ldr	r1, [r2, #4]
   c:	4b0b      	ldr	r3, [pc, #44]	(3c <RCC_DeInit+0x3c>)
   e:	ea01 0303 	and.w	r3, r1, r3
  12:	6053      	str	r3, [r2, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:133
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
  14:	6813      	ldr	r3, [r2, #0]
  16:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
  1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  1e:	6013      	str	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:136

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
  20:	6813      	ldr	r3, [r2, #0]
  22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  26:	6013      	str	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:139

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
  28:	6853      	ldr	r3, [r2, #4]
  2a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
  2e:	6053      	str	r3, [r2, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:142

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
  30:	2300      	movs	r3, #0
  32:	6093      	str	r3, [r2, #8]
C:\cortex\gateway\src/stm32f10x_rcc.c:143
}
  34:	4770      	bx	lr
  36:	46c0      	nop			(mov r8, r8)
  38:	40021000 	.word	0x40021000
  3c:	f8ff0000 	.word	0xf8ff0000
Disassembly of section .text.RCC_HSEConfig:

00000000 <RCC_HSEConfig>:
RCC_HSEConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:166
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
   0:	4a0c      	ldr	r2, [pc, #48]	(34 <RCC_HSEConfig+0x34>)
C:\cortex\gateway\src/stm32f10x_rcc.c:172

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
   2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
C:\cortex\gateway\src/stm32f10x_rcc.c:166
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
   6:	6813      	ldr	r3, [r2, #0]
   8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   c:	6013      	str	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:169

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
   e:	6813      	ldr	r3, [r2, #0]
  10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  14:	6013      	str	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:172

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  16:	d003      	beq.n	20 <RCC_HSEConfig+0x20>
  18:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
  1c:	d108      	bne.n	30 <RCC_HSEConfig+0x30>
  1e:	e003      	b.n	28 <RCC_HSEConfig+0x28>
C:\cortex\gateway\src/stm32f10x_rcc.c:176
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
  20:	6813      	ldr	r3, [r2, #0]
  22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  26:	e002      	b.n	2e <RCC_HSEConfig+0x2e>
C:\cortex\gateway\src/stm32f10x_rcc.c:181
      break;
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
  28:	6813      	ldr	r3, [r2, #0]
  2a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  2e:	6013      	str	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:187
      break;            
      
    default:
      break;      
  }
}
  30:	4770      	bx	lr
  32:	46c0      	nop			(mov r8, r8)
  34:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_AdjustHSICalibrationValue:

00000000 <RCC_AdjustHSICalibrationValue>:
RCC_AdjustHSICalibrationValue():
C:\cortex\gateway\src/stm32f10x_rcc.c:240
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
   0:	4a03      	ldr	r2, [pc, #12]	(10 <RCC_AdjustHSICalibrationValue+0x10>)
   2:	6813      	ldr	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:243

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
   4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
C:\cortex\gateway\src/stm32f10x_rcc.c:246

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
   8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
C:\cortex\gateway\src/stm32f10x_rcc.c:249

  /* Store the new value */
  RCC->CR = tmpreg;
   c:	6013      	str	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:250
}
   e:	4770      	bx	lr
  10:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_HSICmd:

00000000 <RCC_HSICmd>:
RCC_HSICmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:267
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
   0:	4b01      	ldr	r3, [pc, #4]	(8 <RCC_HSICmd+0x8>)
   2:	6018      	str	r0, [r3, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:268
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
   8:	42420000 	.word	0x42420000
Disassembly of section .text.RCC_PLLConfig:

00000000 <RCC_PLLConfig>:
RCC_PLLConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:295

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
   0:	4b03      	ldr	r3, [pc, #12]	(10 <RCC_PLLConfig+0x10>)
   2:	685a      	ldr	r2, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:301

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
   4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
   8:	4310      	orrs	r0, r2
   a:	4308      	orrs	r0, r1
C:\cortex\gateway\src/stm32f10x_rcc.c:304

  /* Store the new value */
  RCC->CFGR = tmpreg;
   c:	6058      	str	r0, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:305
}
   e:	4770      	bx	lr
  10:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_PLLCmd:

00000000 <RCC_PLLCmd>:
RCC_PLLCmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:321
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
   0:	4b01      	ldr	r3, [pc, #4]	(8 <RCC_PLLCmd+0x8>)
   2:	6018      	str	r0, [r3, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:322
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
   8:	42420060 	.word	0x42420060
Disassembly of section .text.RCC_SYSCLKConfig:

00000000 <RCC_SYSCLKConfig>:
RCC_SYSCLKConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:342
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
   0:	4b03      	ldr	r3, [pc, #12]	(10 <RCC_SYSCLKConfig+0x10>)
   2:	685a      	ldr	r2, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:345

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
   4:	f022 0203 	bic.w	r2, r2, #3	; 0x3
C:\cortex\gateway\src/stm32f10x_rcc.c:348

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
   8:	4310      	orrs	r0, r2
C:\cortex\gateway\src/stm32f10x_rcc.c:351

  /* Store the new value */
  RCC->CFGR = tmpreg;
   a:	6058      	str	r0, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:352
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
  10:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_GetSYSCLKSource:

00000000 <RCC_GetSYSCLKSource>:
RCC_GetSYSCLKSource():
C:\cortex\gateway\src/stm32f10x_rcc.c:367
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
   0:	4b02      	ldr	r3, [pc, #8]	(c <RCC_GetSYSCLKSource+0xc>)
   2:	6858      	ldr	r0, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:368
}
   4:	f000 000c 	and.w	r0, r0, #12	; 0xc
   8:	4770      	bx	lr
   a:	46c0      	nop			(mov r8, r8)
   c:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_HCLKConfig:

00000000 <RCC_HCLKConfig>:
RCC_HCLKConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:395
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
   0:	4b03      	ldr	r3, [pc, #12]	(10 <RCC_HCLKConfig+0x10>)
   2:	685a      	ldr	r2, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:398

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
   4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
C:\cortex\gateway\src/stm32f10x_rcc.c:401

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
   8:	4310      	orrs	r0, r2
C:\cortex\gateway\src/stm32f10x_rcc.c:404

  /* Store the new value */
  RCC->CFGR = tmpreg;
   a:	6058      	str	r0, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:405
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
  10:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_PCLK1Config:

00000000 <RCC_PCLK1Config>:
RCC_PCLK1Config():
C:\cortex\gateway\src/stm32f10x_rcc.c:428
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
   0:	4b03      	ldr	r3, [pc, #12]	(10 <RCC_PCLK1Config+0x10>)
   2:	685a      	ldr	r2, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:431

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
   4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
C:\cortex\gateway\src/stm32f10x_rcc.c:434

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
   8:	4310      	orrs	r0, r2
C:\cortex\gateway\src/stm32f10x_rcc.c:437

  /* Store the new value */
  RCC->CFGR = tmpreg;
   a:	6058      	str	r0, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:438
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
  10:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_PCLK2Config:

00000000 <RCC_PCLK2Config>:
RCC_PCLK2Config():
C:\cortex\gateway\src/stm32f10x_rcc.c:461
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
   0:	4a03      	ldr	r2, [pc, #12]	(10 <RCC_PCLK2Config+0x10>)
   2:	6853      	ldr	r3, [r2, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:464

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
   4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
C:\cortex\gateway\src/stm32f10x_rcc.c:467

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
   8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
C:\cortex\gateway\src/stm32f10x_rcc.c:470

  /* Store the new value */
  RCC->CFGR = tmpreg;
   c:	6053      	str	r3, [r2, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:471
}
   e:	4770      	bx	lr
  10:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_ITConfig:

00000000 <RCC_ITConfig>:
RCC_ITConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:495
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <RCC_ITConfig+0xc>
C:\cortex\gateway\src/stm32f10x_rcc.c:498
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
   2:	4a05      	ldr	r2, [pc, #20]	(18 <RCC_ITConfig+0x18>)
   4:	7813      	ldrb	r3, [r2, #0]
   6:	ea40 0303 	orr.w	r3, r0, r3
   a:	e003      	b.n	14 <RCC_ITConfig+0x14>
C:\cortex\gateway\src/stm32f10x_rcc.c:503
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
   c:	4a02      	ldr	r2, [pc, #8]	(18 <RCC_ITConfig+0x18>)
   e:	7813      	ldrb	r3, [r2, #0]
  10:	ea23 0300 	bic.w	r3, r3, r0
  14:	7013      	strb	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:505
  }
}
  16:	4770      	bx	lr
  18:	40021009 	.word	0x40021009
Disassembly of section .text.RCC_USBCLKConfig:

00000000 <RCC_USBCLKConfig>:
RCC_USBCLKConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:525
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
   0:	4b01      	ldr	r3, [pc, #4]	(8 <RCC_USBCLKConfig+0x8>)
   2:	6018      	str	r0, [r3, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:526
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
   8:	424200d8 	.word	0x424200d8
Disassembly of section .text.RCC_ADCCLKConfig:

00000000 <RCC_ADCCLKConfig>:
RCC_ADCCLKConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:548
  u32 tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
   0:	4b03      	ldr	r3, [pc, #12]	(10 <RCC_ADCCLKConfig+0x10>)
   2:	685a      	ldr	r2, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:551

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
   4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
C:\cortex\gateway\src/stm32f10x_rcc.c:554

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
   8:	4310      	orrs	r0, r2
C:\cortex\gateway\src/stm32f10x_rcc.c:557

  /* Store the new value */
  RCC->CFGR = tmpreg;
   a:	6058      	str	r0, [r3, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:558
}
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
  10:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_LSEConfig:

00000000 <RCC_LSEConfig>:
RCC_LSEConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:579
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
   0:	4a06      	ldr	r2, [pc, #24]	(1c <RCC_LSEConfig+0x1c>)
   2:	2300      	movs	r3, #0
C:\cortex\gateway\src/stm32f10x_rcc.c:585

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
   4:	2801      	cmp	r0, #1
C:\cortex\gateway\src/stm32f10x_rcc.c:579
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
   6:	7013      	strb	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:582

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
   8:	7013      	strb	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:585

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
   a:	d002      	beq.n	12 <RCC_LSEConfig+0x12>
   c:	2804      	cmp	r0, #4
   e:	d104      	bne.n	1a <RCC_LSEConfig+0x1a>
  10:	e001      	b.n	16 <RCC_LSEConfig+0x16>
C:\cortex\gateway\src/stm32f10x_rcc.c:589
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
  12:	7010      	strb	r0, [r2, #0]
  14:	e001      	b.n	1a <RCC_LSEConfig+0x1a>
C:\cortex\gateway\src/stm32f10x_rcc.c:594
      break;
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
  16:	2305      	movs	r3, #5
  18:	7013      	strb	r3, [r2, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:600
      break;            
      
    default:
      break;      
  }
}
  1a:	4770      	bx	lr
  1c:	40021020 	.word	0x40021020
Disassembly of section .text.RCC_LSICmd:

00000000 <RCC_LSICmd>:
RCC_LSICmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:616
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
   0:	4b01      	ldr	r3, [pc, #4]	(8 <RCC_LSICmd+0x8>)
   2:	6018      	str	r0, [r3, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:617
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
   8:	42420480 	.word	0x42420480
Disassembly of section .text.RCC_RTCCLKConfig:

00000000 <RCC_RTCCLKConfig>:
RCC_RTCCLKConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:639
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
   0:	4b02      	ldr	r3, [pc, #8]	(c <RCC_RTCCLKConfig+0xc>)
   2:	6a1a      	ldr	r2, [r3, #32]
   4:	4310      	orrs	r0, r2
   6:	6218      	str	r0, [r3, #32]
C:\cortex\gateway\src/stm32f10x_rcc.c:640
}
   8:	4770      	bx	lr
   a:	46c0      	nop			(mov r8, r8)
   c:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_RTCCLKCmd:

00000000 <RCC_RTCCLKCmd>:
RCC_RTCCLKCmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:657
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
   0:	4b01      	ldr	r3, [pc, #4]	(8 <RCC_RTCCLKCmd+0x8>)
   2:	6018      	str	r0, [r3, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:658
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
   8:	4242043c 	.word	0x4242043c
Disassembly of section .text.RCC_GetClocksFreq:

00000000 <RCC_GetClocksFreq>:
RCC_GetClocksFreq():
C:\cortex\gateway\src/stm32f10x_rcc.c:673
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
   0:	491f      	ldr	r1, [pc, #124]	(80 <RCC_GetClocksFreq+0x80>)
C:\cortex\gateway\src/stm32f10x_rcc.c:669
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
   2:	b510      	push	{r4, lr}
C:\cortex\gateway\src/stm32f10x_rcc.c:673
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
   4:	684b      	ldr	r3, [r1, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:669
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
   6:	4604      	mov	r4, r0
C:\cortex\gateway\src/stm32f10x_rcc.c:675
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;

  switch (tmp)
   8:	f003 030c 	and.w	r3, r3, #12	; 0xc
   c:	2b04      	cmp	r3, #4
   e:	d002      	beq.n	16 <RCC_GetClocksFreq+0x16>
  10:	2b08      	cmp	r3, #8
  12:	d114      	bne.n	3e <RCC_GetClocksFreq+0x3e>
  14:	e001      	b.n	1a <RCC_GetClocksFreq+0x1a>
C:\cortex\gateway\src/stm32f10x_rcc.c:682
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
      break;

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
  16:	4b1b      	ldr	r3, [pc, #108]	(84 <RCC_GetClocksFreq+0x84>)
  18:	e012      	b.n	40 <RCC_GetClocksFreq+0x40>
C:\cortex\gateway\src/stm32f10x_rcc.c:687
      break;

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
  1a:	684b      	ldr	r3, [r1, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:688
      pllmull = ( pllmull >> 18) + 2;
  1c:	f3c3 4383 	ubfx	r3, r3, #18, #4
  20:	1c9a      	adds	r2, r3, #2
C:\cortex\gateway\src/stm32f10x_rcc.c:690

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
  22:	684b      	ldr	r3, [r1, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:692

      if (pllsource == 0x00)
  24:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  28:	d101      	bne.n	2e <RCC_GetClocksFreq+0x2e>
C:\cortex\gateway\src/stm32f10x_rcc.c:694
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
  2a:	4b17      	ldr	r3, [pc, #92]	(88 <RCC_GetClocksFreq+0x88>)
  2c:	e005      	b.n	3a <RCC_GetClocksFreq+0x3a>
C:\cortex\gateway\src/stm32f10x_rcc.c:699
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
  2e:	684b      	ldr	r3, [r1, #4]
  30:	f413 3f00 	tst.w	r3, #131072	; 0x20000
C:\cortex\gateway\src/stm32f10x_rcc.c:702
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
  34:	bf14      	ite	ne
  36:	4b15      	ldrne	r3, [pc, #84]	(8c <RCC_GetClocksFreq+0x8c>)
C:\cortex\gateway\src/stm32f10x_rcc.c:706
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
  38:	4b12      	ldreq	r3, [pc, #72]	(84 <RCC_GetClocksFreq+0x84>)
  3a:	4353      	muls	r3, r2
  3c:	e000      	b.n	40 <RCC_GetClocksFreq+0x40>
C:\cortex\gateway\src/stm32f10x_rcc.c:712
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
  3e:	4b14      	ldr	r3, [pc, #80]	(90 <RCC_GetClocksFreq+0x90>)
C:\cortex\gateway\src/stm32f10x_rcc.c:718
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  40:	480f      	ldr	r0, [pc, #60]	(80 <RCC_GetClocksFreq+0x80>)
C:\cortex\gateway\src/stm32f10x_rcc.c:712
        }
      }
      break;

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
  42:	6023      	str	r3, [r4, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:718
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
  44:	6843      	ldr	r3, [r0, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:723
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
  46:	4913      	ldr	r1, [pc, #76]	(94 <RCC_GetClocksFreq+0x94>)
  48:	f3c3 1303 	ubfx	r3, r3, #4, #4
  4c:	5ccb      	ldrb	r3, [r1, r3]
  4e:	6822      	ldr	r2, [r4, #0]
  50:	40da      	lsrs	r2, r3
  52:	6062      	str	r2, [r4, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:726

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
  54:	6843      	ldr	r3, [r0, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:731
  tmp = tmp >> 8;
  presc = APBAHBPrescTable[tmp];

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  56:	f3c3 2302 	ubfx	r3, r3, #8, #3
  5a:	5ccb      	ldrb	r3, [r1, r3]
  5c:	fa32 f303 	lsrs.w	r3, r2, r3
  60:	60a3      	str	r3, [r4, #8]
C:\cortex\gateway\src/stm32f10x_rcc.c:734

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
  62:	6843      	ldr	r3, [r0, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:739
  tmp = tmp >> 11;
  presc = APBAHBPrescTable[tmp];

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
  64:	f3c3 23c2 	ubfx	r3, r3, #11, #3
  68:	5ccb      	ldrb	r3, [r1, r3]
  6a:	40da      	lsrs	r2, r3
  6c:	60e2      	str	r2, [r4, #12]
C:\cortex\gateway\src/stm32f10x_rcc.c:742

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
  6e:	6843      	ldr	r3, [r0, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:747
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
  70:	f3c3 3381 	ubfx	r3, r3, #14, #2
  74:	18c9      	adds	r1, r1, r3
  76:	7c0b      	ldrb	r3, [r1, #16]
  78:	fbb2 f2f3 	udiv	r2, r2, r3
  7c:	6122      	str	r2, [r4, #16]
C:\cortex\gateway\src/stm32f10x_rcc.c:748
}
  7e:	bd10      	pop	{r4, pc}
  80:	40021000 	.word	0x40021000
  84:	00b71b00 	.word	0x00b71b00
  88:	003d0900 	.word	0x003d0900
  8c:	005b8d80 	.word	0x005b8d80
  90:	007a1200 	.word	0x007a1200
  94:	00000000 	.word	0x00000000
Disassembly of section .text.RCC_AHBPeriphClockCmd:

00000000 <RCC_AHBPeriphClockCmd>:
RCC_AHBPeriphClockCmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:774
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <RCC_AHBPeriphClockCmd+0xc>
C:\cortex\gateway\src/stm32f10x_rcc.c:776
  {
    RCC->AHBENR |= RCC_AHBPeriph;
   2:	4a05      	ldr	r2, [pc, #20]	(18 <RCC_AHBPeriphClockCmd+0x18>)
   4:	6953      	ldr	r3, [r2, #20]
   6:	ea40 0303 	orr.w	r3, r0, r3
   a:	e003      	b.n	14 <RCC_AHBPeriphClockCmd+0x14>
C:\cortex\gateway\src/stm32f10x_rcc.c:780
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
   c:	4a02      	ldr	r2, [pc, #8]	(18 <RCC_AHBPeriphClockCmd+0x18>)
   e:	6953      	ldr	r3, [r2, #20]
  10:	ea23 0300 	bic.w	r3, r3, r0
  14:	6153      	str	r3, [r2, #20]
C:\cortex\gateway\src/stm32f10x_rcc.c:782
  }
}
  16:	4770      	bx	lr
  18:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_APB2PeriphClockCmd:

00000000 <RCC_APB2PeriphClockCmd>:
RCC_APB2PeriphClockCmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:807
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <RCC_APB2PeriphClockCmd+0xc>
C:\cortex\gateway\src/stm32f10x_rcc.c:809
  {
    RCC->APB2ENR |= RCC_APB2Periph;
   2:	4a05      	ldr	r2, [pc, #20]	(18 <RCC_APB2PeriphClockCmd+0x18>)
   4:	6993      	ldr	r3, [r2, #24]
   6:	ea40 0303 	orr.w	r3, r0, r3
   a:	e003      	b.n	14 <RCC_APB2PeriphClockCmd+0x14>
C:\cortex\gateway\src/stm32f10x_rcc.c:813
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
   c:	4a02      	ldr	r2, [pc, #8]	(18 <RCC_APB2PeriphClockCmd+0x18>)
   e:	6993      	ldr	r3, [r2, #24]
  10:	ea23 0300 	bic.w	r3, r3, r0
  14:	6193      	str	r3, [r2, #24]
C:\cortex\gateway\src/stm32f10x_rcc.c:815
  }
}
  16:	4770      	bx	lr
  18:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_APB1PeriphClockCmd:

00000000 <RCC_APB1PeriphClockCmd>:
RCC_APB1PeriphClockCmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:841
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <RCC_APB1PeriphClockCmd+0xc>
C:\cortex\gateway\src/stm32f10x_rcc.c:843
  {
    RCC->APB1ENR |= RCC_APB1Periph;
   2:	4a05      	ldr	r2, [pc, #20]	(18 <RCC_APB1PeriphClockCmd+0x18>)
   4:	69d3      	ldr	r3, [r2, #28]
   6:	ea40 0303 	orr.w	r3, r0, r3
   a:	e003      	b.n	14 <RCC_APB1PeriphClockCmd+0x14>
C:\cortex\gateway\src/stm32f10x_rcc.c:847
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
   c:	4a02      	ldr	r2, [pc, #8]	(18 <RCC_APB1PeriphClockCmd+0x18>)
   e:	69d3      	ldr	r3, [r2, #28]
  10:	ea23 0300 	bic.w	r3, r3, r0
  14:	61d3      	str	r3, [r2, #28]
C:\cortex\gateway\src/stm32f10x_rcc.c:849
  }
}
  16:	4770      	bx	lr
  18:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_APB2PeriphResetCmd:

00000000 <RCC_APB2PeriphResetCmd>:
RCC_APB2PeriphResetCmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:873
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <RCC_APB2PeriphResetCmd+0xc>
C:\cortex\gateway\src/stm32f10x_rcc.c:875
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
   2:	4a05      	ldr	r2, [pc, #20]	(18 <RCC_APB2PeriphResetCmd+0x18>)
   4:	68d3      	ldr	r3, [r2, #12]
   6:	ea40 0303 	orr.w	r3, r0, r3
   a:	e003      	b.n	14 <RCC_APB2PeriphResetCmd+0x14>
C:\cortex\gateway\src/stm32f10x_rcc.c:879
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
   c:	4a02      	ldr	r2, [pc, #8]	(18 <RCC_APB2PeriphResetCmd+0x18>)
   e:	68d3      	ldr	r3, [r2, #12]
  10:	ea23 0300 	bic.w	r3, r3, r0
  14:	60d3      	str	r3, [r2, #12]
C:\cortex\gateway\src/stm32f10x_rcc.c:881
  }
}
  16:	4770      	bx	lr
  18:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_APB1PeriphResetCmd:

00000000 <RCC_APB1PeriphResetCmd>:
RCC_APB1PeriphResetCmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:906
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <RCC_APB1PeriphResetCmd+0xc>
C:\cortex\gateway\src/stm32f10x_rcc.c:908
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
   2:	4a05      	ldr	r2, [pc, #20]	(18 <RCC_APB1PeriphResetCmd+0x18>)
   4:	6913      	ldr	r3, [r2, #16]
   6:	ea40 0303 	orr.w	r3, r0, r3
   a:	e003      	b.n	14 <RCC_APB1PeriphResetCmd+0x14>
C:\cortex\gateway\src/stm32f10x_rcc.c:912
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
   c:	4a02      	ldr	r2, [pc, #8]	(18 <RCC_APB1PeriphResetCmd+0x18>)
   e:	6913      	ldr	r3, [r2, #16]
  10:	ea23 0300 	bic.w	r3, r3, r0
  14:	6113      	str	r3, [r2, #16]
C:\cortex\gateway\src/stm32f10x_rcc.c:914
  }
}
  16:	4770      	bx	lr
  18:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_BackupResetCmd:

00000000 <RCC_BackupResetCmd>:
RCC_BackupResetCmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:929
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
   0:	4b01      	ldr	r3, [pc, #4]	(8 <RCC_BackupResetCmd+0x8>)
   2:	6018      	str	r0, [r3, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:930
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
   8:	42420440 	.word	0x42420440
Disassembly of section .text.RCC_ClockSecuritySystemCmd:

00000000 <RCC_ClockSecuritySystemCmd>:
RCC_ClockSecuritySystemCmd():
C:\cortex\gateway\src/stm32f10x_rcc.c:945
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
   0:	4b01      	ldr	r3, [pc, #4]	(8 <RCC_ClockSecuritySystemCmd+0x8>)
   2:	6018      	str	r0, [r3, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:946
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
   8:	4242004c 	.word	0x4242004c
Disassembly of section .text.RCC_MCOConfig:

00000000 <RCC_MCOConfig>:
RCC_MCOConfig():
C:\cortex\gateway\src/stm32f10x_rcc.c:967
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
   0:	4b01      	ldr	r3, [pc, #4]	(8 <RCC_MCOConfig+0x8>)
   2:	7018      	strb	r0, [r3, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:968
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
   8:	40021007 	.word	0x40021007
Disassembly of section .text.RCC_GetFlagStatus:

00000000 <RCC_GetFlagStatus>:
RCC_GetFlagStatus():
C:\cortex\gateway\src/stm32f10x_rcc.c:990
*                       - RCC_FLAG_LPWRRST: Low Power reset
* Output         : None
* Return         : The new state of RCC_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus RCC_GetFlagStatus(u8 RCC_FLAG)
{
   0:	0943      	lsrs	r3, r0, #5
C:\cortex\gateway\src/stm32f10x_rcc.c:1001
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;

  if (tmp == 1)               /* The flag to check is in CR register */
   2:	2b01      	cmp	r3, #1
   4:	d102      	bne.n	c <RCC_GetFlagStatus+0xc>
C:\cortex\gateway\src/stm32f10x_rcc.c:1003
  {
    statusreg = RCC->CR;
   6:	4b08      	ldr	r3, [pc, #32]	(28 <RCC_GetFlagStatus+0x28>)
   8:	681b      	ldr	r3, [r3, #0]
   a:	e005      	b.n	18 <RCC_GetFlagStatus+0x18>
C:\cortex\gateway\src/stm32f10x_rcc.c:1005
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
   c:	2b02      	cmp	r3, #2
C:\cortex\gateway\src/stm32f10x_rcc.c:1007
  {
    statusreg = RCC->BDCR;
   e:	bf0b      	itete	eq
  10:	4b05      	ldreq	r3, [pc, #20]	(28 <RCC_GetFlagStatus+0x28>)
C:\cortex\gateway\src/stm32f10x_rcc.c:1011
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
  12:	4b05      	ldrne	r3, [pc, #20]	(28 <RCC_GetFlagStatus+0x28>)
C:\cortex\gateway\src/stm32f10x_rcc.c:1007
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
  14:	6a1b      	ldreq	r3, [r3, #32]
C:\cortex\gateway\src/stm32f10x_rcc.c:1011
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
  16:	6a5b      	ldrne	r3, [r3, #36]
  18:	f000 001f 	and.w	r0, r0, #31	; 0x1f
  1c:	fa33 f000 	lsrs.w	r0, r3, r0
C:\cortex\gateway\src/stm32f10x_rcc.c:1028
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
  20:	f000 0001 	and.w	r0, r0, #1	; 0x1
  24:	4770      	bx	lr
  26:	46c0      	nop			(mov r8, r8)
  28:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_WaitForHSEStartUp:

00000000 <RCC_WaitForHSEStartUp>:
RCC_WaitForHSEStartUp():
C:\cortex\gateway\src/stm32f10x_rcc.c:199
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
   0:	b507      	push	{r0, r1, r2, lr}
C:\cortex\gateway\src/stm32f10x_rcc.c:200
  vu32 StartUpCounter = 0;
   2:	2300      	movs	r3, #0
   4:	9301      	str	r3, [sp, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:207
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
   6:	2031      	movs	r0, #49
   8:	f7ff fffe 	bl	0 <RCC_WaitForHSEStartUp>
C:\cortex\gateway\src/stm32f10x_rcc.c:208
    StartUpCounter++;  
   c:	9b01      	ldr	r3, [sp, #4]
   e:	3301      	adds	r3, #1
  10:	9301      	str	r3, [sp, #4]
C:\cortex\gateway\src/stm32f10x_rcc.c:209
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
  12:	b918      	cbnz	r0, 1c <RCC_WaitForHSEStartUp+0x1c>
  14:	9b01      	ldr	r3, [sp, #4]
  16:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
  1a:	d1f4      	bne.n	6 <RCC_WaitForHSEStartUp+0x6>
C:\cortex\gateway\src/stm32f10x_rcc.c:212


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
  1c:	2031      	movs	r0, #49
  1e:	f7ff fffe 	bl	0 <RCC_WaitForHSEStartUp>
C:\cortex\gateway\src/stm32f10x_rcc.c:222
  {
    status = ERROR;
  }  

  return (status);
}
  22:	3800      	subs	r0, #0
  24:	bf18      	it	ne
  26:	2001      	movne	r0, #1
  28:	bd0e      	pop	{r1, r2, r3, pc}
  2a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RCC_ClearFlag:

00000000 <RCC_ClearFlag>:
RCC_ClearFlag():
C:\cortex\gateway\src/stm32f10x_rcc.c:1041
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
   0:	4a02      	ldr	r2, [pc, #8]	(c <RCC_ClearFlag+0xc>)
   2:	6a53      	ldr	r3, [r2, #36]
   4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8:	6253      	str	r3, [r2, #36]
C:\cortex\gateway\src/stm32f10x_rcc.c:1044
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
}
   a:	4770      	bx	lr
   c:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_GetITStatus:

00000000 <RCC_GetITStatus>:
RCC_GetITStatus():
C:\cortex\gateway\src/stm32f10x_rcc.c:1061
*                       - RCC_IT_CSS: Clock Security System interrupt
* Output         : None
* Return         : The new state of RCC_IT (SET or RESET).
*******************************************************************************/
ITStatus RCC_GetITStatus(u8 RCC_IT)
{
   0:	4b03      	ldr	r3, [pc, #12]	(10 <RCC_GetITStatus+0x10>)
   2:	689b      	ldr	r3, [r3, #8]
   4:	4218      	tst	r0, r3
C:\cortex\gateway\src/stm32f10x_rcc.c:1079
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
   6:	bf0c      	ite	eq
   8:	2000      	moveq	r0, #0
   a:	2001      	movne	r0, #1
   c:	4770      	bx	lr
   e:	46c0      	nop			(mov r8, r8)
  10:	40021000 	.word	0x40021000
Disassembly of section .text.RCC_ClearITPendingBit:

00000000 <RCC_ClearITPendingBit>:
RCC_ClearITPendingBit():
C:\cortex\gateway\src/stm32f10x_rcc.c:1096
*                       - RCC_IT_CSS: Clock Security System interrupt
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ClearITPendingBit(u8 RCC_IT)
{
   0:	4b01      	ldr	r3, [pc, #4]	(8 <RCC_ClearITPendingBit+0x8>)
   2:	7018      	strb	r0, [r3, #0]
C:\cortex\gateway\src/stm32f10x_rcc.c:1103
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
}
   4:	4770      	bx	lr
   6:	46c0      	nop			(mov r8, r8)
   8:	4002100a 	.word	0x4002100a

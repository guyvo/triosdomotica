
C:\cortex\dimmers\hex\dimmers_rcc.o:     file format elf32-littlearm
C:\cortex\dimmers\hex\dimmers_rcc.o


Disassembly of section .text.RccInit:

00000000 <RccInit>:
RccInit():
C:\cortex\dimmers\src/dimmers_rcc.c:37
* Description    : SYSCLK, HCLK, PCLK2 and PCLK1 configuration 
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RccInit (void){
   0:	b510      	push	{r4, lr}
C:\cortex\dimmers\src/dimmers_rcc.c:41

  ErrorStatus e_HSEStartUpStatus;

  RCC_DeInit();
   2:	f7ff fffe 	bl	0 <RCC_DeInit>
C:\cortex\dimmers\src/dimmers_rcc.c:44

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);
   6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   a:	f7ff fffe 	bl	0 <RCC_HSEConfig>
C:\cortex\dimmers\src/dimmers_rcc.c:47

  /* Wait till HSE is ready */
  e_HSEStartUpStatus = RCC_WaitForHSEStartUp();
   e:	f7ff fffe 	bl	0 <RCC_WaitForHSEStartUp>
C:\cortex\dimmers\src/dimmers_rcc.c:49

  if (e_HSEStartUpStatus == SUCCESS)
  12:	2801      	cmp	r0, #1
C:\cortex\dimmers\src/dimmers_rcc.c:47

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);

  /* Wait till HSE is ready */
  e_HSEStartUpStatus = RCC_WaitForHSEStartUp();
  14:	4604      	mov	r4, r0
C:\cortex\dimmers\src/dimmers_rcc.c:49

  if (e_HSEStartUpStatus == SUCCESS)
  16:	d129      	bne.n	6c <RccInit+0x6c>
C:\cortex\dimmers\src/dimmers_rcc.c:52
  {
    /* Enable Prefetch Buffer */
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
  18:	2010      	movs	r0, #16
  1a:	f7ff fffe 	bl	0 <FLASH_PrefetchBufferCmd>
C:\cortex\dimmers\src/dimmers_rcc.c:55

    /* Flash 2 wait state */
    FLASH_SetLatency(FLASH_Latency_2);
  1e:	2002      	movs	r0, #2
  20:	f7ff fffe 	bl	0 <FLASH_SetLatency>
C:\cortex\dimmers\src/dimmers_rcc.c:58
 
    /* HCLK = SYSCLK max 72M to feed DMA, AHBbus and core clocking */
    RCC_HCLKConfig(RCC_SYSCLK_Div1); 
  24:	2000      	movs	r0, #0
  26:	f7ff fffe 	bl	0 <RCC_HCLKConfig>
C:\cortex\dimmers\src/dimmers_rcc.c:61
  
    /* PCLK2 = HCLK max 72M to feed APB2 peripherals */
    RCC_PCLK2Config(RCC_HCLK_Div1); 
  2a:	2000      	movs	r0, #0
  2c:	f7ff fffe 	bl	0 <RCC_PCLK2Config>
C:\cortex\dimmers\src/dimmers_rcc.c:64

    /* PCLK1 = HCLK/2 max 36M to feed APB1 peripherals */
    RCC_PCLK1Config(RCC_HCLK_Div2);
  30:	f44f 6080 	mov.w	r0, #1024	; 0x400
  34:	f7ff fffe 	bl	0 <RCC_PCLK1Config>
C:\cortex\dimmers\src/dimmers_rcc.c:67
  
    /* ADCCLK = PCLK2/DIV6 72/6 12M may not exceed 14M*/
    RCC_ADCCLKConfig(RCC_PCLK2_Div6); 
  38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  3c:	f7ff fffe 	bl	0 <RCC_ADCCLKConfig>
C:\cortex\dimmers\src/dimmers_rcc.c:70

    /* PLLCLK = 8MHz * 9 = 72 MHz general clock signal to HCLK*/
    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
  40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  44:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
  48:	f7ff fffe 	bl	0 <RCC_PLLConfig>
C:\cortex\dimmers\src/dimmers_rcc.c:73

    /* Enable PLL */ 
    RCC_PLLCmd(ENABLE);
  4c:	4620      	mov	r0, r4
  4e:	f7ff fffe 	bl	0 <RCC_PLLCmd>
C:\cortex\dimmers\src/dimmers_rcc.c:76

    /* Wait till PLL is ready */
    while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
  52:	2039      	movs	r0, #57	; 0x39
  54:	f7ff fffe 	bl	0 <RCC_GetFlagStatus>
  58:	2800      	cmp	r0, #0
  5a:	d0fa      	beq.n	52 <RccInit+0x52>
C:\cortex\dimmers\src/dimmers_rcc.c:81
    {
    }

    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
  5c:	2002      	movs	r0, #2
  5e:	f7ff fffe 	bl	0 <RCC_SYSCLKConfig>
C:\cortex\dimmers\src/dimmers_rcc.c:84

    /* Wait till PLL is used as system clock source */
    while(RCC_GetSYSCLKSource() != 0x08)
  62:	f7ff fffe 	bl	0 <RCC_GetSYSCLKSource>
  66:	2808      	cmp	r0, #8
  68:	d1fb      	bne.n	62 <RccInit+0x62>
  6a:	bd10      	pop	{r4, pc}
  6c:	e7fe      	b.n	6c <RccInit+0x6c>

Disassembly of section .text.RccGetClockSpeeds:

00000000 <RccGetClockSpeeds>:
RccGetClockSpeeds():
C:\cortex\dimmers\src/dimmers_rcc.c:106
* Description    : Get the clock speeds for debug purposes
* Input          : None
* Output         : None
* Return         : RCC_ClocksTypeDef containing the speeds
*******************************************************************************/
RCC_ClocksTypeDef RccGetClockSpeeds( void ){
   0:	b570      	push	{r4, r5, r6, lr}
   2:	b086      	sub	sp, #24
   4:	4604      	mov	r4, r0
C:\cortex\dimmers\src/dimmers_rcc.c:109

    RCC_ClocksTypeDef x_RCC_ClockFreq;
    RCC_GetClocksFreq(&x_RCC_ClockFreq);
   6:	ad01      	add	r5, sp, #4
   8:	4628      	mov	r0, r5
C:\cortex\dimmers\src/dimmers_rcc.c:110
    return x_RCC_ClockFreq;
   a:	4626      	mov	r6, r4
C:\cortex\dimmers\src/dimmers_rcc.c:109
* Return         : RCC_ClocksTypeDef containing the speeds
*******************************************************************************/
RCC_ClocksTypeDef RccGetClockSpeeds( void ){

    RCC_ClocksTypeDef x_RCC_ClockFreq;
    RCC_GetClocksFreq(&x_RCC_ClockFreq);
   c:	f7ff fffe 	bl	0 <RCC_GetClocksFreq>
C:\cortex\dimmers\src/dimmers_rcc.c:110
    return x_RCC_ClockFreq;
  10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  14:	682a      	ldr	r2, [r5, #0]
C:\cortex\dimmers\src/dimmers_rcc.c:111
}
  16:	4620      	mov	r0, r4
C:\cortex\dimmers\src/dimmers_rcc.c:110
*******************************************************************************/
RCC_ClocksTypeDef RccGetClockSpeeds( void ){

    RCC_ClocksTypeDef x_RCC_ClockFreq;
    RCC_GetClocksFreq(&x_RCC_ClockFreq);
    return x_RCC_ClockFreq;
  18:	6032      	str	r2, [r6, #0]
C:\cortex\dimmers\src/dimmers_rcc.c:111
}
  1a:	b006      	add	sp, #24
  1c:	bd70      	pop	{r4, r5, r6, pc}

Disassembly of section .text.RccSetUnsetCSS:

00000000 <RccSetUnsetCSS>:
RccSetUnsetCSS():
C:\cortex\dimmers\src/dimmers_rcc.c:121
* Input          : flag ENABLE/DISABLE
* Output         : None
* Return         : None
*******************************************************************************/
void RccSetUnsetCSS ( bool CSS ){
	RCC_ClockSecuritySystemCmd(CSS);
   0:	f7ff bffe 	b.w	0 <RCC_ClockSecuritySystemCmd>

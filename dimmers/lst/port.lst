
C:\cortex\dimmers\hex\port.o:     file format elf32-littlearm
C:\cortex\dimmers\hex\port.o

Disassembly of section .text.pxPortInitialiseStack:

00000000 <pxPortInitialiseStack>:
pxPortInitialiseStack():
C:\cortex\dimmers\rtos\src/port.c:113

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   0:	b510      	push	{r4, lr}
C:\cortex\dimmers\rtos\src/port.c:116
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   6:	4604      	mov	r4, r0
   8:	f844 3904 	str.w	r3, [r4], #-4
C:\cortex\dimmers\rtos\src/port.c:120
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   c:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
C:\cortex\dimmers\rtos\src/port.c:118
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
  10:	f840 1c04 	str.w	r1, [r0, #-4]
C:\cortex\dimmers\rtos\src/port.c:120
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
  14:	f844 3c04 	str.w	r3, [r4, #-4]
C:\cortex\dimmers\rtos\src/port.c:122
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
  18:	f840 2c1c 	str.w	r2, [r0, #-28]
C:\cortex\dimmers\rtos\src/port.c:126
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  1c:	383c      	subs	r0, #60
  1e:	bd10      	pop	{r4, pc}
Disassembly of section .text.vPortSVCHandler:

00000000 <vPortSVCHandler>:
vPortSVCHandler():
C:\cortex\dimmers\rtos\src/port.c:131
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	asm volatile (
   0:	4b06      	ldr	r3, [pc, #24]	(1c <pxCurrentTCBConst2>)
   2:	6819      	ldr	r1, [r3, #0]
   4:	6808      	ldr	r0, [r1, #0]
   6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   a:	f380 8809 	msr	PSP, r0
   e:	f04f 0000 	mov.w	r0, #0	; 0x0
  12:	f380 8811 	msr	BASEPRI, r0
  16:	f04e 0e0d 	orr.w	lr, lr, #13	; 0xd
  1a:	4770      	bx	lr

0000001c <pxCurrentTCBConst2>:
  1c:	00000000 	.word	0x00000000
Disassembly of section .text.vPortStartFirstTask:

00000000 <vPortStartFirstTask>:
vPortStartFirstTask():
C:\cortex\dimmers\rtos\src/port.c:150
}
/*-----------------------------------------------------------*/

void vPortStartFirstTask( void )
{
	asm volatile(
   0:	4802      	ldr	r0, [pc, #8]	(c <pxCurrentTCB+0xc>)
   2:	6800      	ldr	r0, [r0, #0]
   4:	6800      	ldr	r0, [r0, #0]
   6:	f380 8808 	msr	MSP, r0
   a:	df00      	svc	0
   c:	e000ed08 	.word	0xe000ed08
Disassembly of section .text.vPortEndScheduler:

00000000 <vPortEndScheduler>:
vPortEndScheduler():
C:\cortex\dimmers\rtos\src/port.c:188

void vPortEndScheduler( void )
{
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
   0:	4770      	bx	lr
   2:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.vPortYieldFromISR:

00000000 <vPortYieldFromISR>:
vPortYieldFromISR():
C:\cortex\dimmers\rtos\src/port.c:194
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   0:	4b02      	ldr	r3, [pc, #8]	(c <pxCurrentTCB+0xc>)
   2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   6:	601a      	str	r2, [r3, #0]
C:\cortex\dimmers\rtos\src/port.c:195
}
   8:	4770      	bx	lr
   a:	46c0      	nop			(mov r8, r8)
   c:	e000ed04 	.word	0xe000ed04
Disassembly of section .text.vPortEnterCritical:

00000000 <vPortEnterCritical>:
vPortEnterCritical():
C:\cortex\dimmers\rtos\src/port.c:200
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
   0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
   4:	f380 8811 	msr	BASEPRI, r0
C:\cortex\dimmers\rtos\src/port.c:201
	uxCriticalNesting++;
   8:	4a02      	ldr	r2, [pc, #8]	(14 <vPortEnterCritical+0x14>)
   a:	6813      	ldr	r3, [r2, #0]
   c:	3301      	adds	r3, #1
   e:	6013      	str	r3, [r2, #0]
C:\cortex\dimmers\rtos\src/port.c:202
}
  10:	4770      	bx	lr
  12:	46c0      	nop			(mov r8, r8)
  14:	00000000 	.word	0x00000000
Disassembly of section .text.vPortExitCritical:

00000000 <vPortExitCritical>:
vPortExitCritical():
C:\cortex\dimmers\rtos\src/port.c:207
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	uxCriticalNesting--;
   0:	4a04      	ldr	r2, [pc, #16]	(14 <vPortExitCritical+0x14>)
   2:	6813      	ldr	r3, [r2, #0]
   4:	3b01      	subs	r3, #1
   6:	6013      	str	r3, [r2, #0]
C:\cortex\dimmers\rtos\src/port.c:208
	if( uxCriticalNesting == 0 )
   8:	b91b      	cbnz	r3, 12 <vPortExitCritical+0x12>
C:\cortex\dimmers\rtos\src/port.c:210
	{
		portENABLE_INTERRUPTS();
   a:	f04f 0000 	mov.w	r0, #0	; 0x0
   e:	f380 8811 	msr	BASEPRI, r0
C:\cortex\dimmers\rtos\src/port.c:212
	}
}
  12:	4770      	bx	lr
  14:	00000000 	.word	0x00000000
Disassembly of section .text.xPortPendSVHandler:

00000000 <xPortPendSVHandler>:
xPortPendSVHandler():
C:\cortex\dimmers\rtos\src/port.c:219

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   0:	f3ef 8009 	mrs	r0, PSP
   4:	4b0c      	ldr	r3, [pc, #48]	(38 <pxCurrentTCBConst>)
   6:	681a      	ldr	r2, [r3, #0]
   8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   c:	6010      	str	r0, [r2, #0]
   e:	e92d 4008 	stmdb	sp!, {r3, lr}
  12:	f04f 00bf 	mov.w	r0, #191	; 0xbf
  16:	f380 8811 	msr	BASEPRI, r0
  1a:	f7ff fffe 	bl	0 <vTaskSwitchContext>
  1e:	f04f 0000 	mov.w	r0, #0	; 0x0
  22:	f380 8811 	msr	BASEPRI, r0
  26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  2a:	6819      	ldr	r1, [r3, #0]
  2c:	6808      	ldr	r0, [r1, #0]
  2e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  32:	f380 8809 	msr	PSP, r0
  36:	4770      	bx	lr

00000038 <pxCurrentTCBConst>:
  38:	00000000 	.word	0x00000000
Disassembly of section .text.xPortStartScheduler:

00000000 <xPortStartScheduler>:
xPortStartScheduler():
C:\cortex\dimmers\rtos\src/port.c:166
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   0:	4a0b      	ldr	r2, [pc, #44]	(30 <xPortStartScheduler+0x30>)
C:\cortex\dimmers\rtos\src/port.c:164

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   2:	b510      	push	{r4, lr}
C:\cortex\dimmers\rtos\src/port.c:166
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   4:	6813      	ldr	r3, [r2, #0]
C:\cortex\dimmers\rtos\src/port.c:174
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   6:	2400      	movs	r4, #0
C:\cortex\dimmers\rtos\src/port.c:166
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
   c:	6013      	str	r3, [r2, #0]
C:\cortex\dimmers\rtos\src/port.c:167
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   e:	6813      	ldr	r3, [r2, #0]
  10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
  14:	6013      	str	r3, [r2, #0]
prvSetupTimerInterrupt():
C:\cortex\dimmers\rtos\src/port.c:274
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  16:	4a07      	ldr	r2, [pc, #28]	(34 <xPortStartScheduler+0x34>)
  18:	4b07      	ldr	r3, [pc, #28]	(38 <xPortStartScheduler+0x38>)
  1a:	601a      	str	r2, [r3, #0]
C:\cortex\dimmers\rtos\src/port.c:275
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
  1c:	2207      	movs	r2, #7
  1e:	3b04      	subs	r3, #4
  20:	601a      	str	r2, [r3, #0]
xPortStartScheduler():
C:\cortex\dimmers\rtos\src/port.c:174
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  22:	4b06      	ldr	r3, [pc, #24]	(3c <xPortStartScheduler+0x3c>)
  24:	601c      	str	r4, [r3, #0]
C:\cortex\dimmers\rtos\src/port.c:177

	/* Start the first task. */
	vPortStartFirstTask();
  26:	f7ff fffe 	bl	0 <xPortStartScheduler>
C:\cortex\dimmers\rtos\src/port.c:181

	/* Should not get here! */
	return 0;
}
  2a:	4620      	mov	r0, r4
  2c:	bd10      	pop	{r4, pc}
  2e:	46c0      	nop			(mov r8, r8)
  30:	e000ed20 	.word	0xe000ed20
  34:	0001193f 	.word	0x0001193f
  38:	e000e014 	.word	0xe000e014
  3c:	00000000 	.word	0x00000000
Disassembly of section .text.xPortSysTickHandler:

00000000 <xPortSysTickHandler>:
xPortSysTickHandler():
C:\cortex\dimmers\rtos\src/port.c:256
{
unsigned portLONG ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   0:	4b07      	ldr	r3, [pc, #28]	(20 <xPortSysTickHandler+0x20>)
   2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
C:\cortex\dimmers\rtos\src/port.c:251
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   6:	b510      	push	{r4, lr}
C:\cortex\dimmers\rtos\src/port.c:256
unsigned portLONG ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   8:	601a      	str	r2, [r3, #0]
C:\cortex\dimmers\rtos\src/port.c:259
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
   a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
   e:	f380 8811 	msr	BASEPRI, r0
C:\cortex\dimmers\rtos\src/port.c:261
	{
		vTaskIncrementTick();
  12:	f7ff fffe 	bl	0 <vTaskIncrementTick>
C:\cortex\dimmers\rtos\src/port.c:263
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
  16:	f04f 0000 	mov.w	r0, #0	; 0x0
  1a:	f380 8811 	msr	BASEPRI, r0
C:\cortex\dimmers\rtos\src/port.c:264
}
  1e:	bd10      	pop	{r4, pc}
  20:	e000ed04 	.word	0xe000ed04

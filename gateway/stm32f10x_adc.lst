
D:\cortex\gateway\stm32f10x_adc.o:     file format elf32-littlearm
D:\cortex\gateway\stm32f10x_adc.o

Disassembly of section .text.ADC_StructInit:

00000000 <ADC_StructInit>:
ADC_StructInit():
   0:	f04f 0300 	mov.w	r3, #0	; 0x0
   4:	6003      	str	r3, [r0, #0]
   6:	7103      	strb	r3, [r0, #4]
   8:	7143      	strb	r3, [r0, #5]
   a:	6083      	str	r3, [r0, #8]
   c:	60c3      	str	r3, [r0, #12]
   e:	f103 0301 	add.w	r3, r3, #1	; 0x1
  12:	7403      	strb	r3, [r0, #16]
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_GetDualModeConversionValue:

00000000 <ADC_GetDualModeConversionValue>:
ADC_GetDualModeConversionValue():
   0:	f242 434c 	movw	r3, #9292	; 0x244c
   4:	f2c4 0301 	movt	r3, #16385	; 0x4001
   8:	6818      	ldr	r0, [r3, #0]
   a:	4770      	bx	lr
Disassembly of section .text.ADC_ClearITPendingBit:

00000000 <ADC_ClearITPendingBit>:
ADC_ClearITPendingBit():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_ClearITPendingBit+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_ClearITPendingBit+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	f64f 001f 	movw	r0, #63519	; 0xf81f
  46:	f2c0 0000 	movt	r0, #0	; 0x0
  4a:	ea04 0000 	and.w	r0, r4, r0
  4e:	1e23      	subs	r3, r4, #0
  50:	bf18      	it	ne
  52:	2301      	movne	r3, #1
  54:	2800      	cmp	r0, #0
  56:	bf14      	ite	ne
  58:	2000      	movne	r0, #0
  5a:	f003 0001 	andeq.w	r0, r3, #1	; 0x1
  5e:	f7ff fffe 	bl	0 <assert_param>
  62:	ea4f 2314 	mov.w	r3, r4, lsr #8
  66:	ea6f 0303 	mvn.w	r3, r3
  6a:	602b      	str	r3, [r5, #0]
  6c:	bd70      	pop	{r4, r5, r6, pc}
  6e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_GetITStatus:

00000000 <ADC_GetITStatus>:
ADC_GetITStatus():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_GetITStatus+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_GetITStatus+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
  46:	bf14      	ite	ne
  48:	2300      	movne	r3, #0
  4a:	2301      	moveq	r3, #1
  4c:	f5b5 7f08 	cmp.w	r5, #544	; 0x220
  50:	bf08      	it	eq
  52:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  56:	b113      	cbz	r3, 5e <ADC_GetITStatus+0x5e>
  58:	f04f 0001 	mov.w	r0, #1	; 0x1
  5c:	e004      	b.n	68 <ADC_GetITStatus+0x68>
  5e:	f5b5 6f90 	cmp.w	r5, #1152	; 0x480
  62:	bf14      	ite	ne
  64:	2000      	movne	r0, #0
  66:	2001      	moveq	r0, #1
  68:	f7ff fffe 	bl	0 <assert_param>
  6c:	6862      	ldr	r2, [r4, #4]
  6e:	6823      	ldr	r3, [r4, #0]
  70:	ea13 2315 	ands.w	r3, r3, r5, lsr #8
  74:	bf08      	it	eq
  76:	2000      	moveq	r0, #0
  78:	d004      	beq.n	84 <assert_param+0x84>
  7a:	b2eb      	uxtb	r3, r5
  7c:	4213      	tst	r3, r2
  7e:	bf0c      	ite	eq
  80:	2000      	moveq	r0, #0
  82:	2001      	movne	r0, #1
  84:	bd70      	pop	{r4, r5, r6, pc}
  86:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_ClearFlag:

00000000 <ADC_ClearFlag>:
ADC_ClearFlag():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_ClearFlag+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_ClearFlag+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	f015 0fe0 	tst.w	r5, #224	; 0xe0
  46:	bf14      	ite	ne
  48:	2000      	movne	r0, #0
  4a:	2001      	moveq	r0, #1
  4c:	2d00      	cmp	r5, #0
  4e:	bf0c      	ite	eq
  50:	2000      	moveq	r0, #0
  52:	f000 0001 	andne.w	r0, r0, #1	; 0x1
  56:	f7ff fffe 	bl	0 <assert_param>
  5a:	ea6f 0305 	mvn.w	r3, r5
  5e:	6023      	str	r3, [r4, #0]
  60:	bd70      	pop	{r4, r5, r6, pc}
  62:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_GetFlagStatus:

00000000 <ADC_GetFlagStatus>:
ADC_GetFlagStatus():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_GetFlagStatus+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_GetFlagStatus+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
  46:	b2d2      	uxtb	r2, r2
  48:	2c04      	cmp	r4, #4
  4a:	bf14      	ite	ne
  4c:	2300      	movne	r3, #0
  4e:	2301      	moveq	r3, #1
  50:	2a01      	cmp	r2, #1
  52:	bf98      	it	ls
  54:	f043 0301 	orrls.w	r3, r3, #1	; 0x1
  58:	b113      	cbz	r3, 60 <ADC_GetFlagStatus+0x60>
  5a:	f04f 0001 	mov.w	r0, #1	; 0x1
  5e:	e008      	b.n	72 <ADC_GetFlagStatus+0x72>
  60:	2c10      	cmp	r4, #16
  62:	bf14      	ite	ne
  64:	2300      	movne	r3, #0
  66:	2301      	moveq	r3, #1
  68:	2c08      	cmp	r4, #8
  6a:	bf14      	ite	ne
  6c:	4618      	movne	r0, r3
  6e:	f043 0001 	orreq.w	r0, r3, #1	; 0x1
  72:	f7ff fffe 	bl	0 <assert_param>
  76:	682b      	ldr	r3, [r5, #0]
  78:	421c      	tst	r4, r3
  7a:	bf0c      	ite	eq
  7c:	2000      	moveq	r0, #0
  7e:	2001      	movne	r0, #1
  80:	bd70      	pop	{r4, r5, r6, pc}
  82:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_TempSensorVrefintCmd:

00000000 <ADC_TempSensorVrefintCmd>:
ADC_TempSensorVrefintCmd():
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
   4:	2801      	cmp	r0, #1
   6:	bf8c      	ite	hi
   8:	2000      	movhi	r0, #0
   a:	2001      	movls	r0, #1
   c:	f7ff fffe 	bl	0 <assert_param>
  10:	b144      	cbz	r4, 24 <assert_param+0x24>
  12:	f242 4200 	movw	r2, #9216	; 0x2400
  16:	f2c4 0201 	movt	r2, #16385	; 0x4001
  1a:	6893      	ldr	r3, [r2, #8]
  1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  20:	6093      	str	r3, [r2, #8]
  22:	e007      	b.n	34 <assert_param+0x34>
  24:	f242 4200 	movw	r2, #9216	; 0x2400
  28:	f2c4 0201 	movt	r2, #16385	; 0x4001
  2c:	6893      	ldr	r3, [r2, #8]
  2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
  32:	6093      	str	r3, [r2, #8]
  34:	bd10      	pop	{r4, pc}
  36:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_AnalogWatchdogSingleChannelConfig:

00000000 <ADC_AnalogWatchdogSingleChannelConfig>:
ADC_AnalogWatchdogSingleChannelConfig():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_AnalogWatchdogSingleChannelConfig+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_AnalogWatchdogSingleChannelConfig+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	2d11      	cmp	r5, #17
  44:	bf8c      	ite	hi
  46:	2000      	movhi	r0, #0
  48:	2001      	movls	r0, #1
  4a:	f7ff fffe 	bl	0 <assert_param>
  4e:	6863      	ldr	r3, [r4, #4]
  50:	f023 031f 	bic.w	r3, r3, #31	; 0x1f
  54:	ea45 0303 	orr.w	r3, r5, r3
  58:	6063      	str	r3, [r4, #4]
  5a:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_AnalogWatchdogThresholdsConfig:

00000000 <ADC_AnalogWatchdogThresholdsConfig>:
ADC_AnalogWatchdogThresholdsConfig():
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	4605      	mov	r5, r0
   6:	460e      	mov	r6, r1
   8:	4617      	mov	r7, r2
   a:	f242 4200 	movw	r2, #9216	; 0x2400
   e:	f2c4 0201 	movt	r2, #16385	; 0x4001
  12:	f642 0300 	movw	r3, #10240	; 0x2800
  16:	f2c4 0301 	movt	r3, #16385	; 0x4001
  1a:	4298      	cmp	r0, r3
  1c:	bf14      	ite	ne
  1e:	2300      	movne	r3, #0
  20:	2301      	moveq	r3, #1
  22:	4290      	cmp	r0, r2
  24:	bf08      	it	eq
  26:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  2a:	b113      	cbz	r3, 32 <ADC_AnalogWatchdogThresholdsConfig+0x32>
  2c:	f04f 0001 	mov.w	r0, #1	; 0x1
  30:	e007      	b.n	42 <ADC_AnalogWatchdogThresholdsConfig+0x42>
  32:	f643 4300 	movw	r3, #15360	; 0x3c00
  36:	f2c4 0301 	movt	r3, #16385	; 0x4001
  3a:	4298      	cmp	r0, r3
  3c:	bf14      	ite	ne
  3e:	2000      	movne	r0, #0
  40:	2001      	moveq	r0, #1
  42:	f7ff fffe 	bl	0 <assert_param>
  46:	f640 74ff 	movw	r4, #4095	; 0xfff
  4a:	42a6      	cmp	r6, r4
  4c:	bf8c      	ite	hi
  4e:	2000      	movhi	r0, #0
  50:	2001      	movls	r0, #1
  52:	f7ff fffe 	bl	0 <assert_param>
  56:	42a7      	cmp	r7, r4
  58:	bf8c      	ite	hi
  5a:	2000      	movhi	r0, #0
  5c:	2001      	movls	r0, #1
  5e:	f7ff fffe 	bl	0 <assert_param>
  62:	626e      	str	r6, [r5, #36]
  64:	62af      	str	r7, [r5, #40]
  66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  6a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_AnalogWatchdogCmd:

00000000 <ADC_AnalogWatchdogCmd>:
ADC_AnalogWatchdogCmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_AnalogWatchdogCmd+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_AnalogWatchdogCmd+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	f240 2200 	movw	r2, #512	; 0x200
  46:	f2c0 0280 	movt	r2, #128	; 0x80
  4a:	f240 2300 	movw	r3, #512	; 0x200
  4e:	f2c0 0340 	movt	r3, #64	; 0x40
  52:	429c      	cmp	r4, r3
  54:	bf14      	ite	ne
  56:	2300      	movne	r3, #0
  58:	2301      	moveq	r3, #1
  5a:	4294      	cmp	r4, r2
  5c:	bf08      	it	eq
  5e:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  62:	b9eb      	cbnz	r3, a0 <ADC_AnalogWatchdogCmd+0xa0>
  64:	f240 2200 	movw	r2, #512	; 0x200
  68:	f2c0 02c0 	movt	r2, #192	; 0xc0
  6c:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
  70:	bf14      	ite	ne
  72:	2300      	movne	r3, #0
  74:	2301      	moveq	r3, #1
  76:	4294      	cmp	r4, r2
  78:	bf08      	it	eq
  7a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  7e:	b97b      	cbnz	r3, a0 <ADC_AnalogWatchdogCmd+0xa0>
  80:	f5b4 0f40 	cmp.w	r4, #12582912	; 0xc00000
  84:	bf14      	ite	ne
  86:	2300      	movne	r3, #0
  88:	2301      	moveq	r3, #1
  8a:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
  8e:	bf08      	it	eq
  90:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  94:	b923      	cbnz	r3, a0 <ADC_AnalogWatchdogCmd+0xa0>
  96:	f1d4 0001 	rsbs	r0, r4, #1	; 0x1
  9a:	bf38      	it	cc
  9c:	2000      	movcc	r0, #0
  9e:	e001      	b.n	a4 <ADC_AnalogWatchdogCmd+0xa4>
  a0:	f04f 0001 	mov.w	r0, #1	; 0x1
  a4:	f7ff fffe 	bl	0 <assert_param>
  a8:	686a      	ldr	r2, [r5, #4]
  aa:	f64f 53ff 	movw	r3, #65023	; 0xfdff
  ae:	f6cf 733f 	movt	r3, #65343	; 0xff3f
  b2:	ea02 0203 	and.w	r2, r2, r3
  b6:	ea44 0202 	orr.w	r2, r4, r2
  ba:	606a      	str	r2, [r5, #4]
  bc:	bd70      	pop	{r4, r5, r6, pc}
  be:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_GetInjectedConversionValue:

00000000 <ADC_GetInjectedConversionValue>:
ADC_GetInjectedConversionValue():
   0:	b530      	push	{r4, r5, lr}
   2:	b083      	sub	sp, #12
   4:	4605      	mov	r5, r0
   6:	460c      	mov	r4, r1
   8:	f04f 0300 	mov.w	r3, #0	; 0x0
   c:	9301      	str	r3, [sp, #4]
   e:	f242 4200 	movw	r2, #9216	; 0x2400
  12:	f2c4 0201 	movt	r2, #16385	; 0x4001
  16:	f642 0300 	movw	r3, #10240	; 0x2800
  1a:	f2c4 0301 	movt	r3, #16385	; 0x4001
  1e:	4298      	cmp	r0, r3
  20:	bf14      	ite	ne
  22:	2300      	movne	r3, #0
  24:	2301      	moveq	r3, #1
  26:	4290      	cmp	r0, r2
  28:	bf08      	it	eq
  2a:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  2e:	b113      	cbz	r3, 36 <ADC_GetInjectedConversionValue+0x36>
  30:	f04f 0001 	mov.w	r0, #1	; 0x1
  34:	e007      	b.n	46 <ADC_GetInjectedConversionValue+0x46>
  36:	f643 4300 	movw	r3, #15360	; 0x3c00
  3a:	f2c4 0301 	movt	r3, #16385	; 0x4001
  3e:	4298      	cmp	r0, r3
  40:	bf14      	ite	ne
  42:	2000      	movne	r0, #0
  44:	2001      	moveq	r0, #1
  46:	f7ff fffe 	bl	0 <assert_param>
  4a:	2c18      	cmp	r4, #24
  4c:	bf14      	ite	ne
  4e:	2300      	movne	r3, #0
  50:	2301      	moveq	r3, #1
  52:	2c14      	cmp	r4, #20
  54:	bf08      	it	eq
  56:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  5a:	b113      	cbz	r3, 62 <ADC_GetInjectedConversionValue+0x62>
  5c:	f04f 0001 	mov.w	r0, #1	; 0x1
  60:	e008      	b.n	74 <ADC_GetInjectedConversionValue+0x74>
  62:	2c20      	cmp	r4, #32
  64:	bf14      	ite	ne
  66:	2300      	movne	r3, #0
  68:	2301      	moveq	r3, #1
  6a:	2c1c      	cmp	r4, #28
  6c:	bf14      	ite	ne
  6e:	4618      	movne	r0, r3
  70:	f043 0001 	orreq.w	r0, r3, #1	; 0x1
  74:	f7ff fffe 	bl	0 <assert_param>
  78:	9501      	str	r5, [sp, #4]
  7a:	9b01      	ldr	r3, [sp, #4]
  7c:	f103 0328 	add.w	r3, r3, #40	; 0x28
  80:	4423      	add	r3, r4
  82:	9301      	str	r3, [sp, #4]
  84:	9b01      	ldr	r3, [sp, #4]
  86:	6818      	ldr	r0, [r3, #0]
  88:	b280      	uxth	r0, r0
  8a:	b003      	add	sp, #12
  8c:	bd30      	pop	{r4, r5, pc}
  8e:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_SetInjectedOffset:

00000000 <ADC_SetInjectedOffset>:
ADC_SetInjectedOffset():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	b082      	sub	sp, #8
   4:	4605      	mov	r5, r0
   6:	460c      	mov	r4, r1
   8:	4616      	mov	r6, r2
   a:	f04f 0300 	mov.w	r3, #0	; 0x0
   e:	9301      	str	r3, [sp, #4]
  10:	f242 4200 	movw	r2, #9216	; 0x2400
  14:	f2c4 0201 	movt	r2, #16385	; 0x4001
  18:	f642 0300 	movw	r3, #10240	; 0x2800
  1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  20:	4298      	cmp	r0, r3
  22:	bf14      	ite	ne
  24:	2300      	movne	r3, #0
  26:	2301      	moveq	r3, #1
  28:	4290      	cmp	r0, r2
  2a:	bf08      	it	eq
  2c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  30:	b113      	cbz	r3, 38 <ADC_SetInjectedOffset+0x38>
  32:	f04f 0001 	mov.w	r0, #1	; 0x1
  36:	e007      	b.n	48 <ADC_SetInjectedOffset+0x48>
  38:	f643 4300 	movw	r3, #15360	; 0x3c00
  3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
  40:	4298      	cmp	r0, r3
  42:	bf14      	ite	ne
  44:	2000      	movne	r0, #0
  46:	2001      	moveq	r0, #1
  48:	f7ff fffe 	bl	0 <assert_param>
  4c:	2c18      	cmp	r4, #24
  4e:	bf14      	ite	ne
  50:	2300      	movne	r3, #0
  52:	2301      	moveq	r3, #1
  54:	2c14      	cmp	r4, #20
  56:	bf08      	it	eq
  58:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  5c:	b113      	cbz	r3, 64 <ADC_SetInjectedOffset+0x64>
  5e:	f04f 0001 	mov.w	r0, #1	; 0x1
  62:	e008      	b.n	76 <ADC_SetInjectedOffset+0x76>
  64:	2c20      	cmp	r4, #32
  66:	bf14      	ite	ne
  68:	2300      	movne	r3, #0
  6a:	2301      	moveq	r3, #1
  6c:	2c1c      	cmp	r4, #28
  6e:	bf14      	ite	ne
  70:	4618      	movne	r0, r3
  72:	f043 0001 	orreq.w	r0, r3, #1	; 0x1
  76:	f7ff fffe 	bl	0 <assert_param>
  7a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
  7e:	bf2c      	ite	cs
  80:	2000      	movcs	r0, #0
  82:	2001      	movcc	r0, #1
  84:	f7ff fffe 	bl	0 <assert_param>
  88:	9501      	str	r5, [sp, #4]
  8a:	9b01      	ldr	r3, [sp, #4]
  8c:	4423      	add	r3, r4
  8e:	9301      	str	r3, [sp, #4]
  90:	9b01      	ldr	r3, [sp, #4]
  92:	601e      	str	r6, [r3, #0]
  94:	b002      	add	sp, #8
  96:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_InjectedSequencerLengthConfig:

00000000 <ADC_InjectedSequencerLengthConfig>:
ADC_InjectedSequencerLengthConfig():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_InjectedSequencerLengthConfig+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_InjectedSequencerLengthConfig+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  46:	b2e0      	uxtb	r0, r4
  48:	2803      	cmp	r0, #3
  4a:	bf8c      	ite	hi
  4c:	2000      	movhi	r0, #0
  4e:	2001      	movls	r0, #1
  50:	f7ff fffe 	bl	0 <assert_param>
  54:	6bab      	ldr	r3, [r5, #56]
  56:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  5a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  5e:	63ab      	str	r3, [r5, #56]
  60:	bd70      	pop	{r4, r5, r6, pc}
  62:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_InjectedChannelConfig:

00000000 <ADC_InjectedChannelConfig>:
ADC_InjectedChannelConfig():
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	4604      	mov	r4, r0
   6:	460d      	mov	r5, r1
   8:	4617      	mov	r7, r2
   a:	461e      	mov	r6, r3
   c:	f242 4200 	movw	r2, #9216	; 0x2400
  10:	f2c4 0201 	movt	r2, #16385	; 0x4001
  14:	f642 0300 	movw	r3, #10240	; 0x2800
  18:	f2c4 0301 	movt	r3, #16385	; 0x4001
  1c:	4298      	cmp	r0, r3
  1e:	bf14      	ite	ne
  20:	2300      	movne	r3, #0
  22:	2301      	moveq	r3, #1
  24:	4290      	cmp	r0, r2
  26:	bf08      	it	eq
  28:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  2c:	b113      	cbz	r3, 34 <ADC_InjectedChannelConfig+0x34>
  2e:	f04f 0001 	mov.w	r0, #1	; 0x1
  32:	e007      	b.n	44 <ADC_InjectedChannelConfig+0x44>
  34:	f643 4300 	movw	r3, #15360	; 0x3c00
  38:	f2c4 0301 	movt	r3, #16385	; 0x4001
  3c:	4298      	cmp	r0, r3
  3e:	bf14      	ite	ne
  40:	2000      	movne	r0, #0
  42:	2001      	moveq	r0, #1
  44:	f7ff fffe 	bl	0 <assert_param>
  48:	2d11      	cmp	r5, #17
  4a:	bf8c      	ite	hi
  4c:	2000      	movhi	r0, #0
  4e:	2001      	movls	r0, #1
  50:	f7ff fffe 	bl	0 <assert_param>
  54:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
  58:	b2c0      	uxtb	r0, r0
  5a:	2803      	cmp	r0, #3
  5c:	bf8c      	ite	hi
  5e:	2000      	movhi	r0, #0
  60:	2001      	movls	r0, #1
  62:	f7ff fffe 	bl	0 <assert_param>
  66:	2e07      	cmp	r6, #7
  68:	bf8c      	ite	hi
  6a:	2000      	movhi	r0, #0
  6c:	2001      	movls	r0, #1
  6e:	f7ff fffe 	bl	0 <assert_param>
  72:	2d09      	cmp	r5, #9
  74:	d913      	bls.n	9e <assert_param+0x9e>
  76:	68e1      	ldr	r1, [r4, #12]
  78:	ea4f 0245 	mov.w	r2, r5, lsl #1
  7c:	442a      	add	r2, r5
  7e:	f1a2 021e 	sub.w	r2, r2, #30	; 0x1e
  82:	f04f 0307 	mov.w	r3, #7	; 0x7
  86:	fa03 f302 	lsl.w	r3, r3, r2
  8a:	ea6f 0303 	mvn.w	r3, r3
  8e:	ea03 0301 	and.w	r3, r3, r1
  92:	fa06 f202 	lsl.w	r2, r6, r2
  96:	ea43 0302 	orr.w	r3, r3, r2
  9a:	60e3      	str	r3, [r4, #12]
  9c:	e010      	b.n	c0 <assert_param+0xc0>
  9e:	6921      	ldr	r1, [r4, #16]
  a0:	ea4f 0245 	mov.w	r2, r5, lsl #1
  a4:	442a      	add	r2, r5
  a6:	f04f 0307 	mov.w	r3, #7	; 0x7
  aa:	fa03 f302 	lsl.w	r3, r3, r2
  ae:	ea6f 0303 	mvn.w	r3, r3
  b2:	ea03 0301 	and.w	r3, r3, r1
  b6:	fa06 f202 	lsl.w	r2, r6, r2
  ba:	ea43 0302 	orr.w	r3, r3, r2
  be:	6123      	str	r3, [r4, #16]
  c0:	6ba1      	ldr	r1, [r4, #56]
  c2:	f401 1340 	and.w	r3, r1, #3145728	; 0x300000
  c6:	eba7 5313 	sub.w	r3, r7, r3, lsr #20
  ca:	f103 0302 	add.w	r3, r3, #2	; 0x2
  ce:	b2db      	uxtb	r3, r3
  d0:	ea4f 0283 	mov.w	r2, r3, lsl #2
  d4:	441a      	add	r2, r3
  d6:	f04f 031f 	mov.w	r3, #31	; 0x1f
  da:	fa03 f302 	lsl.w	r3, r3, r2
  de:	ea6f 0303 	mvn.w	r3, r3
  e2:	ea03 0301 	and.w	r3, r3, r1
  e6:	fa05 f202 	lsl.w	r2, r5, r2
  ea:	ea43 0302 	orr.w	r3, r3, r2
  ee:	63a3      	str	r3, [r4, #56]
  f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Disassembly of section .text.ADC_GetSoftwareStartInjectedConvCmdStatus:

00000000 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
ADC_GetSoftwareStartInjectedConvCmdStatus():
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
   4:	f242 4200 	movw	r2, #9216	; 0x2400
   8:	f2c4 0201 	movt	r2, #16385	; 0x4001
   c:	f642 0300 	movw	r3, #10240	; 0x2800
  10:	f2c4 0301 	movt	r3, #16385	; 0x4001
  14:	4298      	cmp	r0, r3
  16:	bf14      	ite	ne
  18:	2300      	movne	r3, #0
  1a:	2301      	moveq	r3, #1
  1c:	4290      	cmp	r0, r2
  1e:	bf08      	it	eq
  20:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  24:	b113      	cbz	r3, 2c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x2c>
  26:	f04f 0001 	mov.w	r0, #1	; 0x1
  2a:	e007      	b.n	3c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x3c>
  2c:	f643 4300 	movw	r3, #15360	; 0x3c00
  30:	f2c4 0301 	movt	r3, #16385	; 0x4001
  34:	4298      	cmp	r0, r3
  36:	bf14      	ite	ne
  38:	2000      	movne	r0, #0
  3a:	2001      	moveq	r0, #1
  3c:	f7ff fffe 	bl	0 <assert_param>
  40:	68a0      	ldr	r0, [r4, #8]
  42:	ea4f 5050 	mov.w	r0, r0, lsr #21
  46:	f000 0001 	and.w	r0, r0, #1	; 0x1
  4a:	bd10      	pop	{r4, pc}
Disassembly of section .text.ADC_SoftwareStartInjectedConvCmd:

00000000 <ADC_SoftwareStartInjectedConvCmd>:
ADC_SoftwareStartInjectedConvCmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_SoftwareStartInjectedConvCmd+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_SoftwareStartInjectedConvCmd+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	2d01      	cmp	r5, #1
  44:	bf8c      	ite	hi
  46:	2000      	movhi	r0, #0
  48:	2001      	movls	r0, #1
  4a:	f7ff fffe 	bl	0 <assert_param>
  4e:	b125      	cbz	r5, 5a <assert_param+0x5a>
  50:	68a3      	ldr	r3, [r4, #8]
  52:	f443 1302 	orr.w	r3, r3, #2129920	; 0x208000
  56:	60a3      	str	r3, [r4, #8]
  58:	e003      	b.n	62 <assert_param+0x62>
  5a:	68a3      	ldr	r3, [r4, #8]
  5c:	f423 1302 	bic.w	r3, r3, #2129920	; 0x208000
  60:	60a3      	str	r3, [r4, #8]
  62:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_ExternalTrigInjectedConvCmd:

00000000 <ADC_ExternalTrigInjectedConvCmd>:
ADC_ExternalTrigInjectedConvCmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_ExternalTrigInjectedConvCmd+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_ExternalTrigInjectedConvCmd+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	2d01      	cmp	r5, #1
  44:	bf8c      	ite	hi
  46:	2000      	movhi	r0, #0
  48:	2001      	movls	r0, #1
  4a:	f7ff fffe 	bl	0 <assert_param>
  4e:	b125      	cbz	r5, 5a <assert_param+0x5a>
  50:	68a3      	ldr	r3, [r4, #8]
  52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  56:	60a3      	str	r3, [r4, #8]
  58:	e003      	b.n	62 <assert_param+0x62>
  5a:	68a3      	ldr	r3, [r4, #8]
  5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  60:	60a3      	str	r3, [r4, #8]
  62:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_ExternalTrigInjectedConvConfig:

00000000 <ADC_ExternalTrigInjectedConvConfig>:
ADC_ExternalTrigInjectedConvConfig():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_ExternalTrigInjectedConvConfig+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_ExternalTrigInjectedConvConfig+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  46:	bf14      	ite	ne
  48:	2300      	movne	r3, #0
  4a:	2301      	moveq	r3, #1
  4c:	2c00      	cmp	r4, #0
  4e:	bf08      	it	eq
  50:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  54:	bb0b      	cbnz	r3, 9a <ADC_ExternalTrigInjectedConvConfig+0x9a>
  56:	f5b4 5f40 	cmp.w	r4, #12288	; 0x3000
  5a:	bf14      	ite	ne
  5c:	2300      	movne	r3, #0
  5e:	2301      	moveq	r3, #1
  60:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
  64:	bf08      	it	eq
  66:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  6a:	b9b3      	cbnz	r3, 9a <ADC_ExternalTrigInjectedConvConfig+0x9a>
  6c:	f5b4 4fa0 	cmp.w	r4, #20480	; 0x5000
  70:	bf14      	ite	ne
  72:	2300      	movne	r3, #0
  74:	2301      	moveq	r3, #1
  76:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  7a:	bf08      	it	eq
  7c:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  80:	b95b      	cbnz	r3, 9a <ADC_ExternalTrigInjectedConvConfig+0x9a>
  82:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
  86:	bf14      	ite	ne
  88:	2000      	movne	r0, #0
  8a:	2001      	moveq	r0, #1
  8c:	f5b4 4fe0 	cmp.w	r4, #28672	; 0x7000
  90:	bf14      	ite	ne
  92:	4603      	movne	r3, r0
  94:	f040 0301 	orreq.w	r3, r0, #1	; 0x1
  98:	b10b      	cbz	r3, 9e <ADC_ExternalTrigInjectedConvConfig+0x9e>
  9a:	f04f 0001 	mov.w	r0, #1	; 0x1
  9e:	f7ff fffe 	bl	0 <assert_param>
  a2:	68ab      	ldr	r3, [r5, #8]
  a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  a8:	ea44 0303 	orr.w	r3, r4, r3
  ac:	60ab      	str	r3, [r5, #8]
  ae:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_InjectedDiscModeCmd:

00000000 <ADC_InjectedDiscModeCmd>:
ADC_InjectedDiscModeCmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_InjectedDiscModeCmd+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_InjectedDiscModeCmd+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	2d01      	cmp	r5, #1
  44:	bf8c      	ite	hi
  46:	2000      	movhi	r0, #0
  48:	2001      	movls	r0, #1
  4a:	f7ff fffe 	bl	0 <assert_param>
  4e:	b125      	cbz	r5, 5a <assert_param+0x5a>
  50:	6863      	ldr	r3, [r4, #4]
  52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  56:	6063      	str	r3, [r4, #4]
  58:	e003      	b.n	62 <assert_param+0x62>
  5a:	6863      	ldr	r3, [r4, #4]
  5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  60:	6063      	str	r3, [r4, #4]
  62:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_AutoInjectedConvCmd:

00000000 <ADC_AutoInjectedConvCmd>:
ADC_AutoInjectedConvCmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_AutoInjectedConvCmd+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_AutoInjectedConvCmd+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	2d01      	cmp	r5, #1
  44:	bf8c      	ite	hi
  46:	2000      	movhi	r0, #0
  48:	2001      	movls	r0, #1
  4a:	f7ff fffe 	bl	0 <assert_param>
  4e:	b125      	cbz	r5, 5a <assert_param+0x5a>
  50:	6863      	ldr	r3, [r4, #4]
  52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  56:	6063      	str	r3, [r4, #4]
  58:	e003      	b.n	62 <assert_param+0x62>
  5a:	6863      	ldr	r3, [r4, #4]
  5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  60:	6063      	str	r3, [r4, #4]
  62:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_GetConversionValue:

00000000 <ADC_GetConversionValue>:
ADC_GetConversionValue():
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
   4:	f242 4200 	movw	r2, #9216	; 0x2400
   8:	f2c4 0201 	movt	r2, #16385	; 0x4001
   c:	f642 0300 	movw	r3, #10240	; 0x2800
  10:	f2c4 0301 	movt	r3, #16385	; 0x4001
  14:	4298      	cmp	r0, r3
  16:	bf14      	ite	ne
  18:	2300      	movne	r3, #0
  1a:	2301      	moveq	r3, #1
  1c:	4290      	cmp	r0, r2
  1e:	bf08      	it	eq
  20:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  24:	b113      	cbz	r3, 2c <ADC_GetConversionValue+0x2c>
  26:	f04f 0001 	mov.w	r0, #1	; 0x1
  2a:	e007      	b.n	3c <ADC_GetConversionValue+0x3c>
  2c:	f643 4300 	movw	r3, #15360	; 0x3c00
  30:	f2c4 0301 	movt	r3, #16385	; 0x4001
  34:	4298      	cmp	r0, r3
  36:	bf14      	ite	ne
  38:	2000      	movne	r0, #0
  3a:	2001      	moveq	r0, #1
  3c:	f7ff fffe 	bl	0 <assert_param>
  40:	6ce0      	ldr	r0, [r4, #76]
  42:	b280      	uxth	r0, r0
  44:	bd10      	pop	{r4, pc}
  46:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_ExternalTrigConvCmd:

00000000 <ADC_ExternalTrigConvCmd>:
ADC_ExternalTrigConvCmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_ExternalTrigConvCmd+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_ExternalTrigConvCmd+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	2d01      	cmp	r5, #1
  44:	bf8c      	ite	hi
  46:	2000      	movhi	r0, #0
  48:	2001      	movls	r0, #1
  4a:	f7ff fffe 	bl	0 <assert_param>
  4e:	b125      	cbz	r5, 5a <assert_param+0x5a>
  50:	68a3      	ldr	r3, [r4, #8]
  52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  56:	60a3      	str	r3, [r4, #8]
  58:	e003      	b.n	62 <assert_param+0x62>
  5a:	68a3      	ldr	r3, [r4, #8]
  5c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  60:	60a3      	str	r3, [r4, #8]
  62:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_RegularChannelConfig:

00000000 <ADC_RegularChannelConfig>:
ADC_RegularChannelConfig():
   0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4:	4605      	mov	r5, r0
   6:	460e      	mov	r6, r1
   8:	4614      	mov	r4, r2
   a:	461f      	mov	r7, r3
   c:	f242 4200 	movw	r2, #9216	; 0x2400
  10:	f2c4 0201 	movt	r2, #16385	; 0x4001
  14:	f642 0300 	movw	r3, #10240	; 0x2800
  18:	f2c4 0301 	movt	r3, #16385	; 0x4001
  1c:	4298      	cmp	r0, r3
  1e:	bf14      	ite	ne
  20:	2300      	movne	r3, #0
  22:	2301      	moveq	r3, #1
  24:	4290      	cmp	r0, r2
  26:	bf08      	it	eq
  28:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  2c:	b113      	cbz	r3, 34 <ADC_RegularChannelConfig+0x34>
  2e:	f04f 0001 	mov.w	r0, #1	; 0x1
  32:	e007      	b.n	44 <ADC_RegularChannelConfig+0x44>
  34:	f643 4300 	movw	r3, #15360	; 0x3c00
  38:	f2c4 0301 	movt	r3, #16385	; 0x4001
  3c:	4298      	cmp	r0, r3
  3e:	bf14      	ite	ne
  40:	2000      	movne	r0, #0
  42:	2001      	moveq	r0, #1
  44:	f7ff fffe 	bl	0 <assert_param>
  48:	2e11      	cmp	r6, #17
  4a:	bf8c      	ite	hi
  4c:	2000      	movhi	r0, #0
  4e:	2001      	movls	r0, #1
  50:	f7ff fffe 	bl	0 <assert_param>
  54:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
  58:	b2c0      	uxtb	r0, r0
  5a:	280f      	cmp	r0, #15
  5c:	bf8c      	ite	hi
  5e:	2000      	movhi	r0, #0
  60:	2001      	movls	r0, #1
  62:	f7ff fffe 	bl	0 <assert_param>
  66:	2f07      	cmp	r7, #7
  68:	bf8c      	ite	hi
  6a:	2000      	movhi	r0, #0
  6c:	2001      	movls	r0, #1
  6e:	f7ff fffe 	bl	0 <assert_param>
  72:	2e09      	cmp	r6, #9
  74:	d913      	bls.n	9e <assert_param+0x9e>
  76:	68e9      	ldr	r1, [r5, #12]
  78:	ea4f 0246 	mov.w	r2, r6, lsl #1
  7c:	4432      	add	r2, r6
  7e:	f1a2 021e 	sub.w	r2, r2, #30	; 0x1e
  82:	f04f 0307 	mov.w	r3, #7	; 0x7
  86:	fa03 f302 	lsl.w	r3, r3, r2
  8a:	ea6f 0303 	mvn.w	r3, r3
  8e:	ea03 0301 	and.w	r3, r3, r1
  92:	fa07 f202 	lsl.w	r2, r7, r2
  96:	ea43 0302 	orr.w	r3, r3, r2
  9a:	60eb      	str	r3, [r5, #12]
  9c:	e010      	b.n	c0 <assert_param+0xc0>
  9e:	6929      	ldr	r1, [r5, #16]
  a0:	ea4f 0246 	mov.w	r2, r6, lsl #1
  a4:	4432      	add	r2, r6
  a6:	f04f 0307 	mov.w	r3, #7	; 0x7
  aa:	fa03 f302 	lsl.w	r3, r3, r2
  ae:	ea6f 0303 	mvn.w	r3, r3
  b2:	ea03 0301 	and.w	r3, r3, r1
  b6:	fa07 f202 	lsl.w	r2, r7, r2
  ba:	ea43 0302 	orr.w	r3, r3, r2
  be:	612b      	str	r3, [r5, #16]
  c0:	2c06      	cmp	r4, #6
  c2:	d813      	bhi.n	ec <assert_param+0xec>
  c4:	6b69      	ldr	r1, [r5, #52]
  c6:	ea4f 0284 	mov.w	r2, r4, lsl #2
  ca:	4422      	add	r2, r4
  cc:	f1a2 0205 	sub.w	r2, r2, #5	; 0x5
  d0:	f04f 031f 	mov.w	r3, #31	; 0x1f
  d4:	fa03 f302 	lsl.w	r3, r3, r2
  d8:	ea6f 0303 	mvn.w	r3, r3
  dc:	ea03 0301 	and.w	r3, r3, r1
  e0:	fa06 f202 	lsl.w	r2, r6, r2
  e4:	ea43 0302 	orr.w	r3, r3, r2
  e8:	636b      	str	r3, [r5, #52]
  ea:	e028      	b.n	13e <assert_param+0x13e>
  ec:	2c0c      	cmp	r4, #12
  ee:	d813      	bhi.n	118 <assert_param+0x118>
  f0:	6b29      	ldr	r1, [r5, #48]
  f2:	ea4f 0284 	mov.w	r2, r4, lsl #2
  f6:	4422      	add	r2, r4
  f8:	f1a2 0223 	sub.w	r2, r2, #35	; 0x23
  fc:	f04f 031f 	mov.w	r3, #31	; 0x1f
 100:	fa03 f302 	lsl.w	r3, r3, r2
 104:	ea6f 0303 	mvn.w	r3, r3
 108:	ea03 0301 	and.w	r3, r3, r1
 10c:	fa06 f202 	lsl.w	r2, r6, r2
 110:	ea43 0302 	orr.w	r3, r3, r2
 114:	632b      	str	r3, [r5, #48]
 116:	e012      	b.n	13e <assert_param+0x13e>
 118:	6ae9      	ldr	r1, [r5, #44]
 11a:	ea4f 0284 	mov.w	r2, r4, lsl #2
 11e:	4422      	add	r2, r4
 120:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 124:	f04f 031f 	mov.w	r3, #31	; 0x1f
 128:	fa03 f302 	lsl.w	r3, r3, r2
 12c:	ea6f 0303 	mvn.w	r3, r3
 130:	ea03 0301 	and.w	r3, r3, r1
 134:	fa06 f202 	lsl.w	r2, r6, r2
 138:	ea43 0302 	orr.w	r3, r3, r2
 13c:	62eb      	str	r3, [r5, #44]
 13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 142:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_DiscModeCmd:

00000000 <ADC_DiscModeCmd>:
ADC_DiscModeCmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_DiscModeCmd+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_DiscModeCmd+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	2d01      	cmp	r5, #1
  44:	bf8c      	ite	hi
  46:	2000      	movhi	r0, #0
  48:	2001      	movls	r0, #1
  4a:	f7ff fffe 	bl	0 <assert_param>
  4e:	b125      	cbz	r5, 5a <assert_param+0x5a>
  50:	6863      	ldr	r3, [r4, #4]
  52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  56:	6063      	str	r3, [r4, #4]
  58:	e003      	b.n	62 <assert_param+0x62>
  5a:	6863      	ldr	r3, [r4, #4]
  5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  60:	6063      	str	r3, [r4, #4]
  62:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_DiscModeChannelCountConfig:

00000000 <ADC_DiscModeChannelCountConfig>:
ADC_DiscModeChannelCountConfig():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_DiscModeChannelCountConfig+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_DiscModeChannelCountConfig+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  46:	b2e0      	uxtb	r0, r4
  48:	2807      	cmp	r0, #7
  4a:	bf8c      	ite	hi
  4c:	2000      	movhi	r0, #0
  4e:	2001      	movls	r0, #1
  50:	f7ff fffe 	bl	0 <assert_param>
  54:	686b      	ldr	r3, [r5, #4]
  56:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  5a:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
  5e:	606b      	str	r3, [r5, #4]
  60:	bd70      	pop	{r4, r5, r6, pc}
  62:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_GetSoftwareStartConvStatus:

00000000 <ADC_GetSoftwareStartConvStatus>:
ADC_GetSoftwareStartConvStatus():
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
   4:	f242 4200 	movw	r2, #9216	; 0x2400
   8:	f2c4 0201 	movt	r2, #16385	; 0x4001
   c:	f642 0300 	movw	r3, #10240	; 0x2800
  10:	f2c4 0301 	movt	r3, #16385	; 0x4001
  14:	4298      	cmp	r0, r3
  16:	bf14      	ite	ne
  18:	2300      	movne	r3, #0
  1a:	2301      	moveq	r3, #1
  1c:	4290      	cmp	r0, r2
  1e:	bf08      	it	eq
  20:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  24:	b113      	cbz	r3, 2c <ADC_GetSoftwareStartConvStatus+0x2c>
  26:	f04f 0001 	mov.w	r0, #1	; 0x1
  2a:	e007      	b.n	3c <ADC_GetSoftwareStartConvStatus+0x3c>
  2c:	f643 4300 	movw	r3, #15360	; 0x3c00
  30:	f2c4 0301 	movt	r3, #16385	; 0x4001
  34:	4298      	cmp	r0, r3
  36:	bf14      	ite	ne
  38:	2000      	movne	r0, #0
  3a:	2001      	moveq	r0, #1
  3c:	f7ff fffe 	bl	0 <assert_param>
  40:	68a0      	ldr	r0, [r4, #8]
  42:	ea4f 5090 	mov.w	r0, r0, lsr #22
  46:	f000 0001 	and.w	r0, r0, #1	; 0x1
  4a:	bd10      	pop	{r4, pc}
Disassembly of section .text.ADC_SoftwareStartConvCmd:

00000000 <ADC_SoftwareStartConvCmd>:
ADC_SoftwareStartConvCmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_SoftwareStartConvCmd+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_SoftwareStartConvCmd+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	2d01      	cmp	r5, #1
  44:	bf8c      	ite	hi
  46:	2000      	movhi	r0, #0
  48:	2001      	movls	r0, #1
  4a:	f7ff fffe 	bl	0 <assert_param>
  4e:	b125      	cbz	r5, 5a <assert_param+0x5a>
  50:	68a3      	ldr	r3, [r4, #8]
  52:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
  56:	60a3      	str	r3, [r4, #8]
  58:	e003      	b.n	62 <assert_param+0x62>
  5a:	68a3      	ldr	r3, [r4, #8]
  5c:	f423 03a0 	bic.w	r3, r3, #5242880	; 0x500000
  60:	60a3      	str	r3, [r4, #8]
  62:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_GetCalibrationStatus:

00000000 <ADC_GetCalibrationStatus>:
ADC_GetCalibrationStatus():
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
   4:	f242 4200 	movw	r2, #9216	; 0x2400
   8:	f2c4 0201 	movt	r2, #16385	; 0x4001
   c:	f642 0300 	movw	r3, #10240	; 0x2800
  10:	f2c4 0301 	movt	r3, #16385	; 0x4001
  14:	4298      	cmp	r0, r3
  16:	bf14      	ite	ne
  18:	2300      	movne	r3, #0
  1a:	2301      	moveq	r3, #1
  1c:	4290      	cmp	r0, r2
  1e:	bf08      	it	eq
  20:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  24:	b113      	cbz	r3, 2c <ADC_GetCalibrationStatus+0x2c>
  26:	f04f 0001 	mov.w	r0, #1	; 0x1
  2a:	e007      	b.n	3c <ADC_GetCalibrationStatus+0x3c>
  2c:	f643 4300 	movw	r3, #15360	; 0x3c00
  30:	f2c4 0301 	movt	r3, #16385	; 0x4001
  34:	4298      	cmp	r0, r3
  36:	bf14      	ite	ne
  38:	2000      	movne	r0, #0
  3a:	2001      	moveq	r0, #1
  3c:	f7ff fffe 	bl	0 <assert_param>
  40:	68a0      	ldr	r0, [r4, #8]
  42:	ea4f 0090 	mov.w	r0, r0, lsr #2
  46:	f000 0001 	and.w	r0, r0, #1	; 0x1
  4a:	bd10      	pop	{r4, pc}
Disassembly of section .text.ADC_StartCalibration:

00000000 <ADC_StartCalibration>:
ADC_StartCalibration():
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
   4:	f242 4200 	movw	r2, #9216	; 0x2400
   8:	f2c4 0201 	movt	r2, #16385	; 0x4001
   c:	f642 0300 	movw	r3, #10240	; 0x2800
  10:	f2c4 0301 	movt	r3, #16385	; 0x4001
  14:	4298      	cmp	r0, r3
  16:	bf14      	ite	ne
  18:	2300      	movne	r3, #0
  1a:	2301      	moveq	r3, #1
  1c:	4290      	cmp	r0, r2
  1e:	bf08      	it	eq
  20:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  24:	b113      	cbz	r3, 2c <ADC_StartCalibration+0x2c>
  26:	f04f 0001 	mov.w	r0, #1	; 0x1
  2a:	e007      	b.n	3c <ADC_StartCalibration+0x3c>
  2c:	f643 4300 	movw	r3, #15360	; 0x3c00
  30:	f2c4 0301 	movt	r3, #16385	; 0x4001
  34:	4298      	cmp	r0, r3
  36:	bf14      	ite	ne
  38:	2000      	movne	r0, #0
  3a:	2001      	moveq	r0, #1
  3c:	f7ff fffe 	bl	0 <assert_param>
  40:	68a3      	ldr	r3, [r4, #8]
  42:	f043 0304 	orr.w	r3, r3, #4	; 0x4
  46:	60a3      	str	r3, [r4, #8]
  48:	bd10      	pop	{r4, pc}
  4a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_GetResetCalibrationStatus:

00000000 <ADC_GetResetCalibrationStatus>:
ADC_GetResetCalibrationStatus():
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
   4:	f242 4200 	movw	r2, #9216	; 0x2400
   8:	f2c4 0201 	movt	r2, #16385	; 0x4001
   c:	f642 0300 	movw	r3, #10240	; 0x2800
  10:	f2c4 0301 	movt	r3, #16385	; 0x4001
  14:	4298      	cmp	r0, r3
  16:	bf14      	ite	ne
  18:	2300      	movne	r3, #0
  1a:	2301      	moveq	r3, #1
  1c:	4290      	cmp	r0, r2
  1e:	bf08      	it	eq
  20:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  24:	b113      	cbz	r3, 2c <ADC_GetResetCalibrationStatus+0x2c>
  26:	f04f 0001 	mov.w	r0, #1	; 0x1
  2a:	e007      	b.n	3c <ADC_GetResetCalibrationStatus+0x3c>
  2c:	f643 4300 	movw	r3, #15360	; 0x3c00
  30:	f2c4 0301 	movt	r3, #16385	; 0x4001
  34:	4298      	cmp	r0, r3
  36:	bf14      	ite	ne
  38:	2000      	movne	r0, #0
  3a:	2001      	moveq	r0, #1
  3c:	f7ff fffe 	bl	0 <assert_param>
  40:	68a0      	ldr	r0, [r4, #8]
  42:	ea4f 00d0 	mov.w	r0, r0, lsr #3
  46:	f000 0001 	and.w	r0, r0, #1	; 0x1
  4a:	bd10      	pop	{r4, pc}
Disassembly of section .text.ADC_ResetCalibration:

00000000 <ADC_ResetCalibration>:
ADC_ResetCalibration():
   0:	b510      	push	{r4, lr}
   2:	4604      	mov	r4, r0
   4:	f242 4200 	movw	r2, #9216	; 0x2400
   8:	f2c4 0201 	movt	r2, #16385	; 0x4001
   c:	f642 0300 	movw	r3, #10240	; 0x2800
  10:	f2c4 0301 	movt	r3, #16385	; 0x4001
  14:	4298      	cmp	r0, r3
  16:	bf14      	ite	ne
  18:	2300      	movne	r3, #0
  1a:	2301      	moveq	r3, #1
  1c:	4290      	cmp	r0, r2
  1e:	bf08      	it	eq
  20:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  24:	b113      	cbz	r3, 2c <ADC_ResetCalibration+0x2c>
  26:	f04f 0001 	mov.w	r0, #1	; 0x1
  2a:	e007      	b.n	3c <ADC_ResetCalibration+0x3c>
  2c:	f643 4300 	movw	r3, #15360	; 0x3c00
  30:	f2c4 0301 	movt	r3, #16385	; 0x4001
  34:	4298      	cmp	r0, r3
  36:	bf14      	ite	ne
  38:	2000      	movne	r0, #0
  3a:	2001      	moveq	r0, #1
  3c:	f7ff fffe 	bl	0 <assert_param>
  40:	68a3      	ldr	r3, [r4, #8]
  42:	f043 0308 	orr.w	r3, r3, #8	; 0x8
  46:	60a3      	str	r3, [r4, #8]
  48:	bd10      	pop	{r4, pc}
  4a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_ITConfig:

00000000 <ADC_ITConfig>:
ADC_ITConfig():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	4616      	mov	r6, r2
   8:	f242 4200 	movw	r2, #9216	; 0x2400
   c:	f2c4 0201 	movt	r2, #16385	; 0x4001
  10:	f642 0300 	movw	r3, #10240	; 0x2800
  14:	f2c4 0301 	movt	r3, #16385	; 0x4001
  18:	4298      	cmp	r0, r3
  1a:	bf14      	ite	ne
  1c:	2300      	movne	r3, #0
  1e:	2301      	moveq	r3, #1
  20:	4290      	cmp	r0, r2
  22:	bf08      	it	eq
  24:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  28:	b113      	cbz	r3, 30 <ADC_ITConfig+0x30>
  2a:	f04f 0001 	mov.w	r0, #1	; 0x1
  2e:	e007      	b.n	40 <ADC_ITConfig+0x40>
  30:	f643 4300 	movw	r3, #15360	; 0x3c00
  34:	f2c4 0301 	movt	r3, #16385	; 0x4001
  38:	4298      	cmp	r0, r3
  3a:	bf14      	ite	ne
  3c:	2000      	movne	r0, #0
  3e:	2001      	moveq	r0, #1
  40:	f7ff fffe 	bl	0 <assert_param>
  44:	2e01      	cmp	r6, #1
  46:	bf8c      	ite	hi
  48:	2000      	movhi	r0, #0
  4a:	2001      	movls	r0, #1
  4c:	f7ff fffe 	bl	0 <assert_param>
  50:	f64f 001f 	movw	r0, #63519	; 0xf81f
  54:	f2c0 0000 	movt	r0, #0	; 0x0
  58:	ea05 0000 	and.w	r0, r5, r0
  5c:	1e2b      	subs	r3, r5, #0
  5e:	bf18      	it	ne
  60:	2301      	movne	r3, #1
  62:	2800      	cmp	r0, #0
  64:	bf14      	ite	ne
  66:	2000      	movne	r0, #0
  68:	f003 0001 	andeq.w	r0, r3, #1	; 0x1
  6c:	f7ff fffe 	bl	0 <assert_param>
  70:	b2e8      	uxtb	r0, r5
  72:	b126      	cbz	r6, 7e <assert_param+0x7e>
  74:	6863      	ldr	r3, [r4, #4]
  76:	ea40 0303 	orr.w	r3, r0, r3
  7a:	6063      	str	r3, [r4, #4]
  7c:	e005      	b.n	8a <assert_param+0x8a>
  7e:	6862      	ldr	r2, [r4, #4]
  80:	ea6f 0300 	mvn.w	r3, r0
  84:	ea03 0302 	and.w	r3, r3, r2
  88:	6063      	str	r3, [r4, #4]
  8a:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_DMACmd:

00000000 <ADC_DMACmd>:
ADC_DMACmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
   6:	f242 4300 	movw	r3, #9216	; 0x2400
   a:	f2c4 0301 	movt	r3, #16385	; 0x4001
   e:	f643 4000 	movw	r0, #15360	; 0x3c00
  12:	f2c4 0001 	movt	r0, #16385	; 0x4001
  16:	4285      	cmp	r5, r0
  18:	bf14      	ite	ne
  1a:	2000      	movne	r0, #0
  1c:	2001      	moveq	r0, #1
  1e:	429d      	cmp	r5, r3
  20:	bf08      	it	eq
  22:	f040 0001 	orreq.w	r0, r0, #1	; 0x1
  26:	f7ff fffe 	bl	0 <assert_param>
  2a:	2c01      	cmp	r4, #1
  2c:	bf8c      	ite	hi
  2e:	2000      	movhi	r0, #0
  30:	2001      	movls	r0, #1
  32:	f7ff fffe 	bl	0 <assert_param>
  36:	b124      	cbz	r4, 42 <assert_param+0x42>
  38:	68ab      	ldr	r3, [r5, #8]
  3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  3e:	60ab      	str	r3, [r5, #8]
  40:	e003      	b.n	4a <assert_param+0x4a>
  42:	68ab      	ldr	r3, [r5, #8]
  44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  48:	60ab      	str	r3, [r5, #8]
  4a:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_Cmd:

00000000 <ADC_Cmd>:
ADC_Cmd():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	460d      	mov	r5, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_Cmd+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_Cmd+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	2d01      	cmp	r5, #1
  44:	bf8c      	ite	hi
  46:	2000      	movhi	r0, #0
  48:	2001      	movls	r0, #1
  4a:	f7ff fffe 	bl	0 <assert_param>
  4e:	b125      	cbz	r5, 5a <assert_param+0x5a>
  50:	68a3      	ldr	r3, [r4, #8]
  52:	f043 0301 	orr.w	r3, r3, #1	; 0x1
  56:	60a3      	str	r3, [r4, #8]
  58:	e003      	b.n	62 <assert_param+0x62>
  5a:	68a3      	ldr	r3, [r4, #8]
  5c:	f023 0301 	bic.w	r3, r3, #1	; 0x1
  60:	60a3      	str	r3, [r4, #8]
  62:	bd70      	pop	{r4, r5, r6, pc}
Disassembly of section .text.ADC_Init:

00000000 <ADC_Init>:
ADC_Init():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	460c      	mov	r4, r1
   6:	f242 4200 	movw	r2, #9216	; 0x2400
   a:	f2c4 0201 	movt	r2, #16385	; 0x4001
   e:	f642 0300 	movw	r3, #10240	; 0x2800
  12:	f2c4 0301 	movt	r3, #16385	; 0x4001
  16:	4298      	cmp	r0, r3
  18:	bf14      	ite	ne
  1a:	2300      	movne	r3, #0
  1c:	2301      	moveq	r3, #1
  1e:	4290      	cmp	r0, r2
  20:	bf08      	it	eq
  22:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  26:	b113      	cbz	r3, 2e <ADC_Init+0x2e>
  28:	f04f 0001 	mov.w	r0, #1	; 0x1
  2c:	e007      	b.n	3e <ADC_Init+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	4298      	cmp	r0, r3
  38:	bf14      	ite	ne
  3a:	2000      	movne	r0, #0
  3c:	2001      	moveq	r0, #1
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	6820      	ldr	r0, [r4, #0]
  44:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  48:	bf14      	ite	ne
  4a:	2300      	movne	r3, #0
  4c:	2301      	moveq	r3, #1
  4e:	2800      	cmp	r0, #0
  50:	bf08      	it	eq
  52:	f043 0301 	orreq.w	r3, r3, #1	; 0x1
  56:	b9d3      	cbnz	r3, 8e <ADC_Init+0x8e>
  58:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
  5c:	d017      	beq.n	8e <ADC_Init+0x8e>
  5e:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
  62:	d014      	beq.n	8e <ADC_Init+0x8e>
  64:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
  68:	d011      	beq.n	8e <ADC_Init+0x8e>
  6a:	f5b0 2fa0 	cmp.w	r0, #327680	; 0x50000
  6e:	d00e      	beq.n	8e <ADC_Init+0x8e>
  70:	f5b0 2fc0 	cmp.w	r0, #393216	; 0x60000
  74:	d00b      	beq.n	8e <ADC_Init+0x8e>
  76:	f5b0 2fe0 	cmp.w	r0, #458752	; 0x70000
  7a:	d008      	beq.n	8e <ADC_Init+0x8e>
  7c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
  80:	d005      	beq.n	8e <ADC_Init+0x8e>
  82:	f5b0 2f10 	cmp.w	r0, #589824	; 0x90000
  86:	bf14      	ite	ne
  88:	2000      	movne	r0, #0
  8a:	2001      	moveq	r0, #1
  8c:	e001      	b.n	92 <ADC_Init+0x92>
  8e:	f04f 0001 	mov.w	r0, #1	; 0x1
  92:	f7ff fffe 	bl	0 <assert_param>
  96:	7920      	ldrb	r0, [r4, #4]
  98:	2801      	cmp	r0, #1
  9a:	bf8c      	ite	hi
  9c:	2000      	movhi	r0, #0
  9e:	2001      	movls	r0, #1
  a0:	f7ff fffe 	bl	0 <assert_param>
  a4:	7960      	ldrb	r0, [r4, #5]
  a6:	2801      	cmp	r0, #1
  a8:	bf8c      	ite	hi
  aa:	2000      	movhi	r0, #0
  ac:	2001      	movls	r0, #1
  ae:	f7ff fffe 	bl	0 <assert_param>
  b2:	68a3      	ldr	r3, [r4, #8]
  b4:	f1d3 0201 	rsbs	r2, r3, #1	; 0x1
  b8:	bf38      	it	cc
  ba:	2200      	movcc	r2, #0
  bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
  c0:	bf14      	ite	ne
  c2:	2000      	movne	r0, #0
  c4:	2001      	moveq	r0, #1
  c6:	ea52 0100 	orrs.w	r1, r2, r0
  ca:	d112      	bne.n	f2 <ADC_Init+0xf2>
  cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  d0:	d00f      	beq.n	f2 <ADC_Init+0xf2>
  d2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
  d6:	d00c      	beq.n	f2 <ADC_Init+0xf2>
  d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
  dc:	d009      	beq.n	f2 <ADC_Init+0xf2>
  de:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
  e2:	d006      	beq.n	f2 <ADC_Init+0xf2>
  e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
  e8:	d003      	beq.n	f2 <ADC_Init+0xf2>
  ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
  ee:	d000      	beq.n	f2 <ADC_Init+0xf2>
  f0:	b10a      	cbz	r2, f6 <ADC_Init+0xf6>
  f2:	f04f 0001 	mov.w	r0, #1	; 0x1
  f6:	f7ff fffe 	bl	0 <assert_param>
  fa:	68e3      	ldr	r3, [r4, #12]
  fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 100:	bf14      	ite	ne
 102:	2000      	movne	r0, #0
 104:	2001      	moveq	r0, #1
 106:	2b00      	cmp	r3, #0
 108:	bf08      	it	eq
 10a:	f040 0001 	orreq.w	r0, r0, #1	; 0x1
 10e:	f7ff fffe 	bl	0 <assert_param>
 112:	7c20      	ldrb	r0, [r4, #16]
 114:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 118:	b2c0      	uxtb	r0, r0
 11a:	280f      	cmp	r0, #15
 11c:	bf8c      	ite	hi
 11e:	2000      	movhi	r0, #0
 120:	2001      	movls	r0, #1
 122:	f7ff fffe 	bl	0 <assert_param>
 126:	686a      	ldr	r2, [r5, #4]
 128:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 12c:	f6cf 73f0 	movt	r3, #65520	; 0xfff0
 130:	ea02 0203 	and.w	r2, r2, r3
 134:	6823      	ldr	r3, [r4, #0]
 136:	ea42 0203 	orr.w	r2, r2, r3
 13a:	7923      	ldrb	r3, [r4, #4]
 13c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 140:	606a      	str	r2, [r5, #4]
 142:	68a9      	ldr	r1, [r5, #8]
 144:	68a2      	ldr	r2, [r4, #8]
 146:	68e3      	ldr	r3, [r4, #12]
 148:	ea42 0203 	orr.w	r2, r2, r3
 14c:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 150:	f6cf 73f1 	movt	r3, #65521	; 0xfff1
 154:	ea01 0103 	and.w	r1, r1, r3
 158:	ea42 0201 	orr.w	r2, r2, r1
 15c:	7963      	ldrb	r3, [r4, #5]
 15e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 162:	60aa      	str	r2, [r5, #8]
 164:	6aea      	ldr	r2, [r5, #44]
 166:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 16a:	7c23      	ldrb	r3, [r4, #16]
 16c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 170:	b2db      	uxtb	r3, r3
 172:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
 176:	62ea      	str	r2, [r5, #44]
 178:	bd70      	pop	{r4, r5, r6, pc}
 17a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.ADC_DeInit:

00000000 <ADC_DeInit>:
ADC_DeInit():
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4604      	mov	r4, r0
   4:	f242 4300 	movw	r3, #9216	; 0x2400
   8:	f2c4 0301 	movt	r3, #16385	; 0x4001
   c:	4298      	cmp	r0, r3
   e:	bf14      	ite	ne
  10:	2500      	movne	r5, #0
  12:	2501      	moveq	r5, #1
  14:	f642 0300 	movw	r3, #10240	; 0x2800
  18:	f2c4 0301 	movt	r3, #16385	; 0x4001
  1c:	4298      	cmp	r0, r3
  1e:	bf14      	ite	ne
  20:	2600      	movne	r6, #0
  22:	2601      	moveq	r6, #1
  24:	ea55 0306 	orrs.w	r3, r5, r6
  28:	bf18      	it	ne
  2a:	2001      	movne	r0, #1
  2c:	d107      	bne.n	3e <ADC_DeInit+0x3e>
  2e:	f643 4300 	movw	r3, #15360	; 0x3c00
  32:	f2c4 0301 	movt	r3, #16385	; 0x4001
  36:	429c      	cmp	r4, r3
  38:	d032      	beq.n	a0 <ADC_DeInit+0xa0>
  3a:	f04f 0000 	mov.w	r0, #0	; 0x0
  3e:	f7ff fffe 	bl	0 <assert_param>
  42:	b165      	cbz	r5, 5e <ADC_DeInit+0x5e>
  44:	f44f 7000 	mov.w	r0, #512	; 0x200
  48:	f04f 0101 	mov.w	r1, #1	; 0x1
  4c:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  50:	f44f 7000 	mov.w	r0, #512	; 0x200
  54:	f04f 0100 	mov.w	r1, #0	; 0x0
  58:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  5c:	e025      	b.n	aa <ADC_DeInit+0xaa>
  5e:	b166      	cbz	r6, 7a <ADC_DeInit+0x7a>
  60:	f44f 6080 	mov.w	r0, #1024	; 0x400
  64:	f04f 0101 	mov.w	r1, #1	; 0x1
  68:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  70:	f04f 0100 	mov.w	r1, #0	; 0x0
  74:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  78:	e017      	b.n	aa <ADC_DeInit+0xaa>
  7a:	f643 4300 	movw	r3, #15360	; 0x3c00
  7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
  82:	429c      	cmp	r4, r3
  84:	d111      	bne.n	aa <ADC_DeInit+0xaa>
  86:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  8a:	f04f 0101 	mov.w	r1, #1	; 0x1
  8e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  96:	f04f 0100 	mov.w	r1, #0	; 0x0
  9a:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
  9e:	e004      	b.n	aa <ADC_DeInit+0xaa>
  a0:	f04f 0001 	mov.w	r0, #1	; 0x1
  a4:	f7ff fffe 	bl	0 <assert_param>
  a8:	e7d9      	b.n	5e <assert_param+0x5e>
  aa:	bd70      	pop	{r4, r5, r6, pc}

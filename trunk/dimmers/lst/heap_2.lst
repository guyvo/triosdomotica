
C:\cortex\dimmers\hex\heap_2.o:     file format elf32-littlearm
C:\cortex\dimmers\hex\heap_2.o


Disassembly of section .text.pvPortMalloc:

00000000 <pvPortMalloc>:
pvPortMalloc():
C:\cortex\dimmers\rtos\src/heap_2.c:160
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   0:	b538      	push	{r3, r4, r5, lr}
   2:	4605      	mov	r5, r0
C:\cortex\dimmers\rtos\src/heap_2.c:165
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
   4:	f7ff fffe 	bl	0 <vTaskSuspendAll>
C:\cortex\dimmers\rtos\src/heap_2.c:169
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
   8:	4b24      	ldr	r3, [pc, #144]	; (9c <pvPortMalloc+0x9c>)
   a:	6899      	ldr	r1, [r3, #8]
   c:	b981      	cbnz	r1, 30 <pvPortMalloc+0x30>
C:\cortex\dimmers\rtos\src/heap_2.c:171
		{
			prvHeapInit();
   e:	4a24      	ldr	r2, [pc, #144]	; (a0 <pvPortMalloc+0xa0>)
  10:	f44f 44a0 	mov.w	r4, #20480	; 0x5000
  14:	f8c2 4c34 	str.w	r4, [r2, #3124]	; 0xc34
  18:	f8c2 1c30 	str.w	r1, [r2, #3120]	; 0xc30
  1c:	f502 6243 	add.w	r2, r2, #3120	; 0xc30
  20:	f103 0010 	add.w	r0, r3, #16
  24:	611a      	str	r2, [r3, #16]
C:\cortex\dimmers\rtos\src/heap_2.c:172
			xHeapHasBeenInitialised = pdTRUE;
  26:	2201      	movs	r2, #1
C:\cortex\dimmers\rtos\src/heap_2.c:171
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
		{
			prvHeapInit();
  28:	6018      	str	r0, [r3, #0]
  2a:	6059      	str	r1, [r3, #4]
  2c:	615c      	str	r4, [r3, #20]
C:\cortex\dimmers\rtos\src/heap_2.c:172
			xHeapHasBeenInitialised = pdTRUE;
  2e:	609a      	str	r2, [r3, #8]
C:\cortex\dimmers\rtos\src/heap_2.c:177
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
  30:	b135      	cbz	r5, 40 <pvPortMalloc+0x40>
C:\cortex\dimmers\rtos\src/heap_2.c:179
		{
			xWantedSize += heapSTRUCT_SIZE;
  32:	3508      	adds	r5, #8
C:\cortex\dimmers\rtos\src/heap_2.c:182

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( xWantedSize & heapBYTE_ALIGNMENT_MASK )
  34:	f015 0f03 	tst.w	r5, #3
C:\cortex\dimmers\rtos\src/heap_2.c:185
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & heapBYTE_ALIGNMENT_MASK ) );
  38:	bf1c      	itt	ne
  3a:	f025 0503 	bicne.w	r5, r5, #3
  3e:	3504      	addne	r5, #4
C:\cortex\dimmers\rtos\src/heap_2.c:189
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
  40:	1e69      	subs	r1, r5, #1
  42:	f644 72fe 	movw	r2, #20478	; 0x4ffe
  46:	4291      	cmp	r1, r2
  48:	d822      	bhi.n	90 <pvPortMalloc+0x90>
C:\cortex\dimmers\rtos\src/heap_2.c:194
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
  4a:	681b      	ldr	r3, [r3, #0]
C:\cortex\dimmers\rtos\src/heap_2.c:193

		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
  4c:	4a13      	ldr	r2, [pc, #76]	; (9c <pvPortMalloc+0x9c>)
C:\cortex\dimmers\rtos\src/heap_2.c:195
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
  4e:	e001      	b.n	54 <pvPortMalloc+0x54>
  50:	461a      	mov	r2, r3
  52:	4603      	mov	r3, r0
  54:	6859      	ldr	r1, [r3, #4]
  56:	42a9      	cmp	r1, r5
  58:	d202      	bcs.n	60 <pvPortMalloc+0x60>
  5a:	6818      	ldr	r0, [r3, #0]
  5c:	2800      	cmp	r0, #0
  5e:	d1f7      	bne.n	50 <pvPortMalloc+0x50>
C:\cortex\dimmers\rtos\src/heap_2.c:202
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
  60:	4810      	ldr	r0, [pc, #64]	; (a4 <pvPortMalloc+0xa4>)
  62:	4283      	cmp	r3, r0
  64:	d014      	beq.n	90 <pvPortMalloc+0x90>
C:\cortex\dimmers\rtos\src/heap_2.c:206
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned portCHAR * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  66:	6814      	ldr	r4, [r2, #0]
C:\cortex\dimmers\rtos\src/heap_2.c:210

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  68:	6818      	ldr	r0, [r3, #0]
C:\cortex\dimmers\rtos\src/heap_2.c:213

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  6a:	1b49      	subs	r1, r1, r5
C:\cortex\dimmers\rtos\src/heap_2.c:206
			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned portCHAR * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
  6c:	3408      	adds	r4, #8
C:\cortex\dimmers\rtos\src/heap_2.c:213
				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  6e:	2910      	cmp	r1, #16
C:\cortex\dimmers\rtos\src/heap_2.c:210
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned portCHAR * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );

				/* This block is being returned for use so must be taken our of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
  70:	6010      	str	r0, [r2, #0]
C:\cortex\dimmers\rtos\src/heap_2.c:213

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
  72:	d90e      	bls.n	92 <pvPortMalloc+0x92>
C:\cortex\dimmers\rtos\src/heap_2.c:218
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned portCHAR * ) pxBlock ) + xWantedSize );
  74:	195a      	adds	r2, r3, r5
C:\cortex\dimmers\rtos\src/heap_2.c:222
					
					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;	
  76:	6051      	str	r1, [r2, #4]
C:\cortex\dimmers\rtos\src/heap_2.c:223
					pxBlock->xBlockSize = xWantedSize;			
  78:	605d      	str	r5, [r3, #4]
C:\cortex\dimmers\rtos\src/heap_2.c:226
					
					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
  7a:	6850      	ldr	r0, [r2, #4]
  7c:	4b07      	ldr	r3, [pc, #28]	; (9c <pvPortMalloc+0x9c>)
  7e:	e000      	b.n	82 <pvPortMalloc+0x82>
  80:	460b      	mov	r3, r1
  82:	6819      	ldr	r1, [r3, #0]
  84:	684d      	ldr	r5, [r1, #4]
  86:	4285      	cmp	r5, r0
  88:	d3fa      	bcc.n	80 <pvPortMalloc+0x80>
  8a:	6011      	str	r1, [r2, #0]
  8c:	601a      	str	r2, [r3, #0]
  8e:	e000      	b.n	92 <pvPortMalloc+0x92>
C:\cortex\dimmers\rtos\src/heap_2.c:163

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
  90:	2400      	movs	r4, #0
C:\cortex\dimmers\rtos\src/heap_2.c:231
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
				}
			}
		}
	}
	xTaskResumeAll();
  92:	f7ff fffe 	bl	0 <xTaskResumeAll>
C:\cortex\dimmers\rtos\src/heap_2.c:234

	return pvReturn;
}
  96:	4620      	mov	r0, r4
  98:	bd38      	pop	{r3, r4, r5, pc}
  9a:	bf00      	nop
  9c:	00000000 	.word	0x00000000
  a0:	000043e0 	.word	0x000043e0
  a4:	00005010 	.word	0x00005010

Disassembly of section .text.vPortFree:

00000000 <vPortFree>:
vPortFree():
C:\cortex\dimmers\rtos\src/heap_2.c:238
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   0:	4604b570 	.word	0x4604b570
C:\cortex\dimmers\rtos\src/heap_2.c:242
unsigned portCHAR *puc = ( unsigned portCHAR * ) pv;
xBlockLink *pxLink;

	if( pv )
   4:	b190      	cbz	r0, 2c <vPortFree+0x2c>
C:\cortex\dimmers\rtos\src/heap_2.c:246
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   6:	f1a0 0508 	sub.w	r5, r0, #8
C:\cortex\dimmers\rtos\src/heap_2.c:251

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   a:	f7ff fffe 	bl	0 <vTaskSuspendAll>
C:\cortex\dimmers\rtos\src/heap_2.c:254
		{				
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
   e:	6869      	ldr	r1, [r5, #4]
  10:	4b07      	ldr	r3, [pc, #28]	; (30 <vPortFree+0x30>)
  12:	e000      	b.n	16 <vPortFree+0x16>
  14:	4613      	mov	r3, r2
  16:	681a      	ldr	r2, [r3, #0]
  18:	6850      	ldr	r0, [r2, #4]
  1a:	4288      	cmp	r0, r1
  1c:	d3fa      	bcc.n	14 <vPortFree+0x14>
  1e:	f844 2c08 	str.w	r2, [r4, #-8]
  22:	601d      	str	r5, [r3, #0]
C:\cortex\dimmers\rtos\src/heap_2.c:258
		}
		xTaskResumeAll();
	}
}
  24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
C:\cortex\dimmers\rtos\src/heap_2.c:256
		vTaskSuspendAll();
		{				
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
		}
		xTaskResumeAll();
  28:	f7ff bffe 	b.w	0 <xTaskResumeAll>
  2c:	bd70      	pop	{r4, r5, r6, pc}
  2e:	bf00      	nop
  30:	00000000 	.word	0x00000000

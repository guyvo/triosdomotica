
C:\cortex\dimmers\hex\croutine.o:     file format elf32-littlearm
C:\cortex\dimmers\hex\croutine.o


Disassembly of section .text.xCoRoutineCreate:

00000000 <xCoRoutineCreate>:
xCoRoutineCreate():
C:\cortex\dimmers\rtos\src/croutine.c:124
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	4604      	mov	r4, r0
C:\cortex\dimmers\rtos\src/croutine.c:129
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   6:	2038      	movs	r0, #56	; 0x38
C:\cortex\dimmers\rtos\src/croutine.c:124
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   8:	460d      	mov	r5, r1
   a:	4693      	mov	fp, r2
C:\cortex\dimmers\rtos\src/croutine.c:129
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   c:	f7ff fffe 	bl	0 <pvPortMalloc>
C:\cortex\dimmers\rtos\src/croutine.c:130
	if( pxCoRoutine )
  10:	4606      	mov	r6, r0
  12:	2800      	cmp	r0, #0
  14:	d048      	beq.n	a8 <xCoRoutineCreate+0xa8>
C:\cortex\dimmers\rtos\src/croutine.c:134
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
  16:	4f26      	ldr	r7, [pc, #152]	; (b0 <xCoRoutineCreate+0xb0>)
  18:	683b      	ldr	r3, [r7, #0]
  1a:	f107 0804 	add.w	r8, r7, #4
  1e:	b9cb      	cbnz	r3, 54 <xCoRoutineCreate+0x54>
C:\cortex\dimmers\rtos\src/croutine.c:136
		{
			pxCurrentCoRoutine = pxCoRoutine;
  20:	6038      	str	r0, [r7, #0]
prvInitialiseCoRoutineLists():
C:\cortex\dimmers\rtos\src/croutine.c:333
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
  22:	4640      	mov	r0, r8
  24:	f7ff fffe 	bl	0 <vListInitialise>
C:\cortex\dimmers\rtos\src/croutine.c:336
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
  28:	f107 0a2c 	add.w	sl, r7, #44	; 0x2c
C:\cortex\dimmers\rtos\src/croutine.c:333
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
  2c:	f107 0018 	add.w	r0, r7, #24
  30:	f7ff fffe 	bl	0 <vListInitialise>
C:\cortex\dimmers\rtos\src/croutine.c:337
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
  34:	f107 0940 	add.w	r9, r7, #64	; 0x40
C:\cortex\dimmers\rtos\src/croutine.c:336
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
  38:	4650      	mov	r0, sl
  3a:	f7ff fffe 	bl	0 <vListInitialise>
C:\cortex\dimmers\rtos\src/croutine.c:337
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
  3e:	4648      	mov	r0, r9
  40:	f7ff fffe 	bl	0 <vListInitialise>
C:\cortex\dimmers\rtos\src/croutine.c:338
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
  44:	f107 0054 	add.w	r0, r7, #84	; 0x54
  48:	f7ff fffe 	bl	0 <vListInitialise>
C:\cortex\dimmers\rtos\src/croutine.c:342

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
  4c:	f8c7 a068 	str.w	sl, [r7, #104]	; 0x68
C:\cortex\dimmers\rtos\src/croutine.c:343
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
  50:	f8c7 906c 	str.w	r9, [r7, #108]	; 0x6c
  54:	2d01      	cmp	r5, #1
  56:	bf34      	ite	cc
  58:	46a9      	movcc	r9, r5
  5a:	f04f 0901 	movcs.w	r9, #1
xCoRoutineCreate():
C:\cortex\dimmers\rtos\src/croutine.c:150

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
		pxCoRoutine->uxPriority = uxPriority;
		pxCoRoutine->uxIndex = uxIndex;
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
  5e:	4635      	mov	r5, r6
C:\cortex\dimmers\rtos\src/croutine.c:147
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
  60:	2300      	movs	r3, #0
C:\cortex\dimmers\rtos\src/croutine.c:150
		pxCoRoutine->uxPriority = uxPriority;
		pxCoRoutine->uxIndex = uxIndex;
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
  62:	f845 4b04 	str.w	r4, [r5], #4
C:\cortex\dimmers\rtos\src/croutine.c:147
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
  66:	86b3      	strh	r3, [r6, #52]	; 0x34
C:\cortex\dimmers\rtos\src/croutine.c:153
		pxCoRoutine->uxPriority = uxPriority;
		pxCoRoutine->uxIndex = uxIndex;
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
  68:	4628      	mov	r0, r5
C:\cortex\dimmers\rtos\src/croutine.c:148
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
		pxCoRoutine->uxPriority = uxPriority;
  6a:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
C:\cortex\dimmers\rtos\src/croutine.c:149
		pxCoRoutine->uxIndex = uxIndex;
  6e:	f8c6 b030 	str.w	fp, [r6, #48]	; 0x30
C:\cortex\dimmers\rtos\src/croutine.c:153
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
  72:	f7ff fffe 	bl	0 <vListInitialiseItem>
C:\cortex\dimmers\rtos\src/croutine.c:154
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
  76:	f106 0018 	add.w	r0, r6, #24
  7a:	f7ff fffe 	bl	0 <vListInitialiseItem>
C:\cortex\dimmers\rtos\src/croutine.c:163
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  7e:	f1c9 0305 	rsb	r3, r9, #5
C:\cortex\dimmers\rtos\src/croutine.c:167
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
  82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
C:\cortex\dimmers\rtos\src/croutine.c:163
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
  84:	61b3      	str	r3, [r6, #24]
C:\cortex\dimmers\rtos\src/croutine.c:167
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
  86:	6af3      	ldr	r3, [r6, #44]	; 0x2c
C:\cortex\dimmers\rtos\src/croutine.c:159
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
  88:	6136      	str	r6, [r6, #16]
C:\cortex\dimmers\rtos\src/croutine.c:167
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
  8a:	4293      	cmp	r3, r2
  8c:	bf88      	it	hi
  8e:	4a08      	ldrhi	r2, [pc, #32]	; (b0 <xCoRoutineCreate+0xb0>)
C:\cortex\dimmers\rtos\src/croutine.c:160

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
  90:	6276      	str	r6, [r6, #36]	; 0x24
C:\cortex\dimmers\rtos\src/croutine.c:167
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
  92:	bf88      	it	hi
  94:	6713      	strhi	r3, [r2, #112]	; 0x70
  96:	2014      	movs	r0, #20
  98:	fb00 8003 	mla	r0, r0, r3, r8
  9c:	4629      	mov	r1, r5
  9e:	f7ff fffe 	bl	0 <vListInsertEnd>
C:\cortex\dimmers\rtos\src/croutine.c:169

		xReturn = pdPASS;
  a2:	2001      	movs	r0, #1
  a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
C:\cortex\dimmers\rtos\src/croutine.c:173
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  a8:	f04f 30ff 	mov.w	r0, #4294967295
C:\cortex\dimmers\rtos\src/croutine.c:177
	}
	
	return xReturn;	
}
  ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  b0:	00000000 	.word	0x00000000

Disassembly of section .text.vCoRoutineAddToDelayedList:

00000000 <vCoRoutineAddToDelayedList>:
vCoRoutineAddToDelayedList():
C:\cortex\dimmers\rtos\src/croutine.c:181
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   0:	4c0db570 	.word	0x4c0db570
   4:	460d      	mov	r5, r1
C:\cortex\dimmers\rtos\src/croutine.c:186
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   6:	6f66      	ldr	r6, [r4, #116]	; 0x74
   8:	1986      	adds	r6, r0, r6
C:\cortex\dimmers\rtos\src/croutine.c:191

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   a:	6820      	ldr	r0, [r4, #0]
   c:	3004      	adds	r0, #4
   e:	f7ff fffe 	bl	0 <vListRemove>
C:\cortex\dimmers\rtos\src/croutine.c:196

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xCoRoutineTickCount )
  12:	6f63      	ldr	r3, [r4, #116]	; 0x74
C:\cortex\dimmers\rtos\src/croutine.c:194
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
  14:	6821      	ldr	r1, [r4, #0]
C:\cortex\dimmers\rtos\src/croutine.c:196

	if( xTimeToWake < xCoRoutineTickCount )
  16:	429e      	cmp	r6, r3
C:\cortex\dimmers\rtos\src/croutine.c:200
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
  18:	bf34      	ite	cc
  1a:	6ee0      	ldrcc	r0, [r4, #108]	; 0x6c
C:\cortex\dimmers\rtos\src/croutine.c:206
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
  1c:	6ea0      	ldrcs	r0, [r4, #104]	; 0x68
C:\cortex\dimmers\rtos\src/croutine.c:194
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
  1e:	f841 6f04 	str.w	r6, [r1, #4]!
C:\cortex\dimmers\rtos\src/croutine.c:206
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
  22:	f7ff fffe 	bl	0 <vListInsert>
C:\cortex\dimmers\rtos\src/croutine.c:209
	}

	if( pxEventList )
  26:	b135      	cbz	r5, 36 <vCoRoutineAddToDelayedList+0x36>
C:\cortex\dimmers\rtos\src/croutine.c:213
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
  28:	6821      	ldr	r1, [r4, #0]
  2a:	4628      	mov	r0, r5
  2c:	3118      	adds	r1, #24
C:\cortex\dimmers\rtos\src/croutine.c:215
	}
}
  2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
C:\cortex\dimmers\rtos\src/croutine.c:213

	if( pxEventList )
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
  32:	f7ff bffe 	b.w	0 <vListInsert>
  36:	bd70      	pop	{r4, r5, r6, pc}
  38:	00000000 	.word	0x00000000

Disassembly of section .text.vCoRoutineSchedule:

00000000 <vCoRoutineSchedule>:
vCoRoutineSchedule():
C:\cortex\dimmers\rtos\src/croutine.c:298
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   0:	b570      	push	{r4, r5, r6, lr}
   2:	e020      	b.n	46 <vCoRoutineSchedule+0x46>
prvCheckPendingReadyList():
C:\cortex\dimmers\rtos\src/croutine.c:228
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
   8:	f380 8811 	msr	BASEPRI, r0
C:\cortex\dimmers\rtos\src/croutine.c:230
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   c:	6d6c      	ldr	r4, [r5, #84]	; 0x54
   e:	b10c      	cbz	r4, 14 <vCoRoutineSchedule+0x14>
  10:	6e2b      	ldr	r3, [r5, #96]	; 0x60
  12:	68dc      	ldr	r4, [r3, #12]
C:\cortex\dimmers\rtos\src/croutine.c:231
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
  14:	f104 0018 	add.w	r0, r4, #24
  18:	f7ff fffe 	bl	0 <vListRemove>
C:\cortex\dimmers\rtos\src/croutine.c:233
		}
		portENABLE_INTERRUPTS();
  1c:	f04f 0000 	mov.w	r0, #0
  20:	f380 8811 	msr	BASEPRI, r0
C:\cortex\dimmers\rtos\src/croutine.c:235

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
  24:	1d26      	adds	r6, r4, #4
  26:	4630      	mov	r0, r6
  28:	f7ff fffe 	bl	0 <vListRemove>
C:\cortex\dimmers\rtos\src/croutine.c:236
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
  2c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  30:	4631      	mov	r1, r6
  32:	4293      	cmp	r3, r2
  34:	bf84      	itt	hi
  36:	4a38      	ldrhi	r2, [pc, #224]	; (118 <vCoRoutineSchedule+0x118>)
  38:	6713      	strhi	r3, [r2, #112]	; 0x70
  3a:	4a38      	ldr	r2, [pc, #224]	; (11c <vCoRoutineSchedule+0x11c>)
  3c:	2014      	movs	r0, #20
  3e:	fb00 2003 	mla	r0, r0, r3, r2
  42:	f7ff fffe 	bl	0 <vListInsertEnd>
C:\cortex\dimmers\rtos\src/croutine.c:223
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( !listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) )
  46:	4d34      	ldr	r5, [pc, #208]	; (118 <vCoRoutineSchedule+0x118>)
  48:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  4a:	462c      	mov	r4, r5
  4c:	2b00      	cmp	r3, #0
  4e:	d1d9      	bne.n	4 <vCoRoutineSchedule+0x4>
prvCheckDelayedList():
C:\cortex\dimmers\rtos\src/croutine.c:245

static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
  50:	f7ff fffe 	bl	0 <xTaskGetTickCount>
  54:	6feb      	ldr	r3, [r5, #124]	; 0x7c
  56:	1ac3      	subs	r3, r0, r3
  58:	67ab      	str	r3, [r5, #120]	; 0x78
  5a:	e036      	b.n	ca <vCoRoutineSchedule+0xca>
C:\cortex\dimmers\rtos\src/croutine.c:248
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
  5c:	6f59      	ldr	r1, [r3, #116]	; 0x74
C:\cortex\dimmers\rtos\src/croutine.c:249
		xPassedTicks--;
  5e:	3a01      	subs	r2, #1
C:\cortex\dimmers\rtos\src/croutine.c:248
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
  60:	3101      	adds	r1, #1
  62:	6759      	str	r1, [r3, #116]	; 0x74
C:\cortex\dimmers\rtos\src/croutine.c:249
		xPassedTicks--;
  64:	679a      	str	r2, [r3, #120]	; 0x78
C:\cortex\dimmers\rtos\src/croutine.c:252

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
  66:	2900      	cmp	r1, #0
  68:	d128      	bne.n	bc <vCoRoutineSchedule+0xbc>
C:\cortex\dimmers\rtos\src/croutine.c:258
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
  6a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
C:\cortex\dimmers\rtos\src/croutine.c:259
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
  6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
C:\cortex\dimmers\rtos\src/croutine.c:260
			pxOverflowDelayedCoRoutineList = pxTemp;
  6e:	66da      	str	r2, [r3, #108]	; 0x6c
C:\cortex\dimmers\rtos\src/croutine.c:259
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
  70:	6699      	str	r1, [r3, #104]	; 0x68
  72:	e023      	b.n	bc <vCoRoutineSchedule+0xbc>
C:\cortex\dimmers\rtos\src/croutine.c:266
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
		{	
			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
  74:	4b28      	ldr	r3, [pc, #160]	; (118 <vCoRoutineSchedule+0x118>)
  76:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  78:	686b      	ldr	r3, [r5, #4]
  7a:	429a      	cmp	r2, r3
  7c:	d325      	bcc.n	ca <vCoRoutineSchedule+0xca>
C:\cortex\dimmers\rtos\src/croutine.c:272
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
  7e:	f04f 00bf 	mov.w	r0, #191	; 0xbf
  82:	f380 8811 	msr	BASEPRI, r0
C:\cortex\dimmers\rtos\src/croutine.c:279
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
  86:	1d2e      	adds	r6, r5, #4
  88:	4630      	mov	r0, r6
  8a:	f7ff fffe 	bl	0 <vListRemove>
C:\cortex\dimmers\rtos\src/croutine.c:282

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
  8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  90:	b11b      	cbz	r3, 9a <vCoRoutineSchedule+0x9a>
C:\cortex\dimmers\rtos\src/croutine.c:284
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
  92:	f105 0018 	add.w	r0, r5, #24
  96:	f7ff fffe 	bl	0 <vListRemove>
C:\cortex\dimmers\rtos\src/croutine.c:287
				}
			}
			portENABLE_INTERRUPTS();
  9a:	f04f 0000 	mov.w	r0, #0
  9e:	f380 8811 	msr	BASEPRI, r0
C:\cortex\dimmers\rtos\src/croutine.c:289

			prvAddCoRoutineToReadyQueue( pxCRCB );													
  a2:	6f22      	ldr	r2, [r4, #112]	; 0x70
  a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  a6:	4631      	mov	r1, r6
  a8:	4293      	cmp	r3, r2
  aa:	bf84      	itt	hi
  ac:	4a1a      	ldrhi	r2, [pc, #104]	; (118 <vCoRoutineSchedule+0x118>)
  ae:	6713      	strhi	r3, [r2, #112]	; 0x70
  b0:	4a1a      	ldr	r2, [pc, #104]	; (11c <vCoRoutineSchedule+0x11c>)
  b2:	2014      	movs	r0, #20
  b4:	fb00 2003 	mla	r0, r0, r3, r2
  b8:	f7ff fffe 	bl	0 <vListInsertEnd>
C:\cortex\dimmers\rtos\src/croutine.c:264
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( ( pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList ) ) != NULL )
  bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  be:	681a      	ldr	r2, [r3, #0]
  c0:	b11a      	cbz	r2, ca <vCoRoutineSchedule+0xca>
  c2:	68db      	ldr	r3, [r3, #12]
  c4:	68dd      	ldr	r5, [r3, #12]
  c6:	2d00      	cmp	r5, #0
  c8:	d1d4      	bne.n	74 <vCoRoutineSchedule+0x74>
C:\cortex\dimmers\rtos\src/croutine.c:246
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
  ca:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  cc:	4b12      	ldr	r3, [pc, #72]	; (118 <vCoRoutineSchedule+0x118>)
  ce:	2a00      	cmp	r2, #0
  d0:	d1c4      	bne.n	5c <vCoRoutineSchedule+0x5c>
C:\cortex\dimmers\rtos\src/croutine.c:293

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
  d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  d4:	67da      	str	r2, [r3, #124]	; 0x7c
  d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
vCoRoutineSchedule():
C:\cortex\dimmers\rtos\src/croutine.c:306

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
  d8:	e003      	b.n	e2 <vCoRoutineSchedule+0xe2>
C:\cortex\dimmers\rtos\src/croutine.c:308
	{
		if( uxTopCoRoutineReadyPriority == 0 )
  da:	b90b      	cbnz	r3, e0 <vCoRoutineSchedule+0xe0>
  dc:	670b      	str	r3, [r1, #112]	; 0x70
  de:	bd70      	pop	{r4, r5, r6, pc}
  e0:	3b01      	subs	r3, #1
C:\cortex\dimmers\rtos\src/croutine.c:306

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
  e2:	2014      	movs	r0, #20
  e4:	4358      	muls	r0, r3
  e6:	1822      	adds	r2, r4, r0
  e8:	6855      	ldr	r5, [r2, #4]
  ea:	490b      	ldr	r1, [pc, #44]	; (118 <vCoRoutineSchedule+0x118>)
  ec:	2d00      	cmp	r5, #0
  ee:	d0f4      	beq.n	da <vCoRoutineSchedule+0xda>
C:\cortex\dimmers\rtos\src/croutine.c:318
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
  f0:	6895      	ldr	r5, [r2, #8]
C:\cortex\dimmers\rtos\src/croutine.c:306

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
  f2:	670b      	str	r3, [r1, #112]	; 0x70
C:\cortex\dimmers\rtos\src/croutine.c:318
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
  f4:	686d      	ldr	r5, [r5, #4]
  f6:	1809      	adds	r1, r1, r0
  f8:	310c      	adds	r1, #12
  fa:	6095      	str	r5, [r2, #8]
  fc:	428d      	cmp	r5, r1
  fe:	bf04      	itt	eq
 100:	6869      	ldreq	r1, [r5, #4]
 102:	6091      	streq	r1, [r2, #8]
 104:	2214      	movs	r2, #20
 106:	fb02 4303 	mla	r3, r2, r3, r4
 10a:	689b      	ldr	r3, [r3, #8]
 10c:	68d8      	ldr	r0, [r3, #12]
 10e:	6020      	str	r0, [r4, #0]
C:\cortex\dimmers\rtos\src/croutine.c:321

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 110:	6803      	ldr	r3, [r0, #0]
 112:	6b01      	ldr	r1, [r0, #48]	; 0x30
 114:	4798      	blx	r3
 116:	bd70      	pop	{r4, r5, r6, pc}
 118:	00000000 	.word	0x00000000
 11c:	00000004 	.word	0x00000004

Disassembly of section .text.xCoRoutineRemoveFromEventList:

00000000 <xCoRoutineRemoveFromEventList>:
xCoRoutineRemoveFromEventList():
C:\cortex\dimmers\rtos\src/croutine.c:348
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   0:	6804b570 	.word	0x6804b570
C:\cortex\dimmers\rtos\src/croutine.c:354
corCRCB *pxUnblockedCRCB;
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   4:	b10c      	cbz	r4, a <xCoRoutineRemoveFromEventList+0xa>
   6:	68c3      	ldr	r3, [r0, #12]
   8:	68dc      	ldr	r4, [r3, #12]
C:\cortex\dimmers\rtos\src/croutine.c:355
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   a:	f104 0618 	add.w	r6, r4, #24
C:\cortex\dimmers\rtos\src/croutine.c:356
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   e:	4d08      	ldr	r5, [pc, #32]	; (30 <xCoRoutineRemoveFromEventList+0x30>)
C:\cortex\dimmers\rtos\src/croutine.c:355
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
  10:	4630      	mov	r0, r6
  12:	f7ff fffe 	bl	0 <vListRemove>
C:\cortex\dimmers\rtos\src/croutine.c:356
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
  16:	f105 0054 	add.w	r0, r5, #84	; 0x54
  1a:	4631      	mov	r1, r6
  1c:	f7ff fffe 	bl	0 <vListInsertEnd>
C:\cortex\dimmers\rtos\src/croutine.c:358

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
  20:	682b      	ldr	r3, [r5, #0]
C:\cortex\dimmers\rtos\src/croutine.c:360
	{
		xReturn = pdTRUE;
  22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
C:\cortex\dimmers\rtos\src/croutine.c:368
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
  26:	4298      	cmp	r0, r3
  28:	bf34      	ite	cc
  2a:	2000      	movcc	r0, #0
  2c:	2001      	movcs	r0, #1
  2e:	bd70      	pop	{r4, r5, r6, pc}
  30:	00000000 	.word	0x00000000

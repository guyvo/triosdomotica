
D:\cortex\dimmers\hex\rcc.o:     file format elf32-littlearm
D:\cortex\dimmers\hex\rcc.o

Disassembly of section .text.RccInit:

00000000 <RccInit>:
RccInit():
D:\cortex\dimmers\src/rcc.c:23
* Description    : SYSCLK, HCLK, PCLK2 and PCLK1 configuration 
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RccInit (void){
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
D:\cortex\dimmers\src/rcc.c:27

  ErrorStatus e_HSEStartUpStatus;

  RCC_DeInit();
   6:	f7ff fffe 	bl	0 <RCC_DeInit>
D:\cortex\dimmers\src/rcc.c:30

  /* Enable HSE */
  RCC_HSEConfig(RCC_HSE_ON);
   a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   e:	f7ff fffe 	bl	0 <RCC_HSEConfig>
D:\cortex\dimmers\src/rcc.c:33

  /* Wait till HSE is ready */
  e_HSEStartUpStatus = RCC_WaitForHSEStartUp();
  12:	f7ff fffe 	bl	0 <RCC_WaitForHSEStartUp>
  16:	4603      	mov	r3, r0
  18:	71fb      	strb	r3, [r7, #7]
D:\cortex\dimmers\src/rcc.c:35

  if (e_HSEStartUpStatus == SUCCESS)
  1a:	79fb      	ldrb	r3, [r7, #7]
  1c:	2b01      	cmp	r3, #1
  1e:	d132      	bne.n	86 <RccInit+0x86>
D:\cortex\dimmers\src/rcc.c:38
  {
    /* Enable Prefetch Buffer */
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
  20:	f04f 0010 	mov.w	r0, #16	; 0x10
  24:	f7ff fffe 	bl	0 <FLASH_PrefetchBufferCmd>
D:\cortex\dimmers\src/rcc.c:41

    /* Flash 2 wait state */
    FLASH_SetLatency(FLASH_Latency_2);
  28:	f04f 0002 	mov.w	r0, #2	; 0x2
  2c:	f7ff fffe 	bl	0 <FLASH_SetLatency>
D:\cortex\dimmers\src/rcc.c:44
 
    /* HCLK = SYSCLK */
    RCC_HCLKConfig(RCC_SYSCLK_Div1); 
  30:	f04f 0000 	mov.w	r0, #0	; 0x0
  34:	f7ff fffe 	bl	0 <RCC_HCLKConfig>
D:\cortex\dimmers\src/rcc.c:47
  
    /* PCLK2 = HCLK */
    RCC_PCLK2Config(RCC_HCLK_Div1); 
  38:	f04f 0000 	mov.w	r0, #0	; 0x0
  3c:	f7ff fffe 	bl	0 <RCC_PCLK2Config>
D:\cortex\dimmers\src/rcc.c:50

    /* PCLK1 = HCLK/2 */
    RCC_PCLK1Config(RCC_HCLK_Div2);
  40:	f44f 6080 	mov.w	r0, #1024	; 0x400
  44:	f7ff fffe 	bl	0 <RCC_PCLK1Config>
D:\cortex\dimmers\src/rcc.c:53
  
     /* ADCCLK = PCLK2/DIV6 14M */
    RCC_ADCCLKConfig(RCC_PCLK2_Div6); 
  48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  4c:	f7ff fffe 	bl	0 <RCC_ADCCLKConfig>
D:\cortex\dimmers\src/rcc.c:56

    /* PLLCLK = 8MHz * 9 = 72 MHz */
    RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
  50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  54:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
  58:	f7ff fffe 	bl	0 <RCC_PLLConfig>
D:\cortex\dimmers\src/rcc.c:59

    /* Enable PLL */ 
    RCC_PLLCmd(ENABLE);
  5c:	f04f 0001 	mov.w	r0, #1	; 0x1
  60:	f7ff fffe 	bl	0 <RCC_PLLCmd>
D:\cortex\dimmers\src/rcc.c:62

    /* Wait till PLL is ready */
    while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
  64:	f04f 0039 	mov.w	r0, #57	; 0x39
  68:	f7ff fffe 	bl	0 <RCC_GetFlagStatus>
  6c:	4603      	mov	r3, r0
  6e:	2b00      	cmp	r3, #0
  70:	d0f8      	beq.n	64 <RccInit+0x64>
D:\cortex\dimmers\src/rcc.c:67
    {
    }

    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
  72:	f04f 0002 	mov.w	r0, #2	; 0x2
  76:	f7ff fffe 	bl	0 <RCC_SYSCLKConfig>
D:\cortex\dimmers\src/rcc.c:70

    /* Wait till PLL is used as system clock source */
    while(RCC_GetSYSCLKSource() != 0x08)
  7a:	f7ff fffe 	bl	0 <RCC_GetSYSCLKSource>
  7e:	4603      	mov	r3, r0
  80:	2b08      	cmp	r3, #8
  82:	d1fa      	bne.n	7a <RCC_GetSYSCLKSource+0x7a>
  84:	e000      	b.n	88 <RCC_GetSYSCLKSource+0x88>
  86:	e7fe      	b.n	86 <RCC_GetSYSCLKSource+0x86>
D:\cortex\dimmers\src/rcc.c:82

    /* Go to infinite loop */
    while (1)
    {
	  // TODO error handling here
    }
  88:	f107 0708 	add.w	r7, r7, #8	; 0x8
  8c:	46bd      	mov	sp, r7
  8e:	bd80      	pop	{r7, pc}
Disassembly of section .text.RccSetUnsetCSS.2812:

00000000 <RccSetUnsetCSS.2812>:
RccSetUnsetCSS():
D:\cortex\dimmers\src/rcc.c:106
  *					 this will generate an NMI exception when HSE clock fails 
  * Input          : flag ENABLE/DISABLE
  * Output         : None
  * Return         : None
  *******************************************************************************/
  void RccSetUnsetCSS ( bool CSS ){
   0:	b580      	push	{r7, lr}
   2:	b082      	sub	sp, #8
   4:	af00      	add	r7, sp, #0
   6:	4603      	mov	r3, r0
   8:	71fb      	strb	r3, [r7, #7]
D:\cortex\dimmers\src/rcc.c:107
	RCC_ClockSecuritySystemCmd(CSS);
   a:	79fb      	ldrb	r3, [r7, #7]
   c:	4618      	mov	r0, r3
   e:	f7ff fffe 	bl	0 <RCC_ClockSecuritySystemCmd>
D:\cortex\dimmers\src/rcc.c:108
  }
  12:	f107 0708 	add.w	r7, r7, #8	; 0x8
  16:	46bd      	mov	sp, r7
  18:	bd80      	pop	{r7, pc}
RccSetUnsetCSS.2812():
  1a:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.RccGetClockSpeeds.2808:

00000000 <RccGetClockSpeeds.2808>:
RccGetClockSpeeds():
D:\cortex\dimmers\src/rcc.c:91
  * Description    : Get the clock speeds for debug purposes
  * Input          : None
  * Output         : None
  * Return         : RCC_ClocksTypeDef containing the speeds
  *******************************************************************************/
  RCC_ClocksTypeDef RccGetClockSpeeds( void ){
   0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2:	b087      	sub	sp, #28
   4:	af00      	add	r7, sp, #0
   6:	4606      	mov	r6, r0
D:\cortex\dimmers\src/rcc.c:95

	RCC_ClocksTypeDef x_RCC_ClockFreq;
  
	RCC_GetClocksFreq(&x_RCC_ClockFreq);
   8:	f107 0304 	add.w	r3, r7, #4	; 0x4
   c:	4618      	mov	r0, r3
   e:	f7ff fffe 	bl	0 <RCC_GetClocksFreq>
D:\cortex\dimmers\src/rcc.c:96
	return x_RCC_ClockFreq;
  12:	4635      	mov	r5, r6
  14:	f107 0404 	add.w	r4, r7, #4	; 0x4
  18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  1c:	6823      	ldr	r3, [r4, #0]
  1e:	602b      	str	r3, [r5, #0]
D:\cortex\dimmers\src/rcc.c:97
  }
  20:	4630      	mov	r0, r6
  22:	f107 071c 	add.w	r7, r7, #28	; 0x1c
  26:	46bd      	mov	sp, r7
  28:	bdf0      	pop	{r4, r5, r6, r7, pc}
RccGetClockSpeeds.2808():
  2a:	46c0      	nop			(mov r8, r8)

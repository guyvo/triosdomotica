
C:\cortex\gateway\out\stm32f10x_spi.o:     file format elf32-littlearm
C:\cortex\gateway\out\stm32f10x_spi.o


Disassembly of section .text.SPI_I2S_DeInit:

00000000 <SPI_I2S_DeInit>:
SPI_I2S_DeInit():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:63
* Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
   0:	b507      	push	{r0, r1, r2, lr}
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:67
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  switch (*(u32*)&SPIx)
   2:	4b14      	ldr	r3, [pc, #80]	; (54 <SPI_I2S_DeInit+0x54>)
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:63
* Input          : - SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
   4:	9001      	str	r0, [sp, #4]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:67
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  switch (*(u32*)&SPIx)
   6:	4298      	cmp	r0, r3
   8:	d019      	beq.n	3e <SPI_I2S_DeInit+0x3e>
   a:	4b13      	ldr	r3, [pc, #76]	; (58 <SPI_I2S_DeInit+0x58>)
   c:	4298      	cmp	r0, r3
   e:	d003      	beq.n	18 <SPI_I2S_DeInit+0x18>
  10:	4b12      	ldr	r3, [pc, #72]	; (5c <SPI_I2S_DeInit+0x5c>)
  12:	4298      	cmp	r0, r3
  14:	d11d      	bne.n	52 <SPI_I2S_DeInit+0x52>
  16:	e00a      	b.n	2e <SPI_I2S_DeInit+0x2e>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:71
  {
    case SPI1_BASE:
      /* Enable SPI1 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  18:	2101      	movs	r1, #1
  1a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  1e:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:73
      /* Release SPI1 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  22:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  26:	2100      	movs	r1, #0
  28:	f7ff fffe 	bl	0 <RCC_APB2PeriphResetCmd>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:74
      break;
  2c:	e011      	b.n	52 <SPI_I2S_DeInit+0x52>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:78

    case SPI2_BASE:
      /* Enable SPI2 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  32:	2101      	movs	r1, #1
  34:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:80
      /* Release SPI2 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  3c:	e006      	b.n	4c <SPI_I2S_DeInit+0x4c>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:85
      break;

    case SPI3_BASE:
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  42:	2101      	movs	r1, #1
  44:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:87
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  4c:	2100      	movs	r1, #0
  4e:	f7ff fffe 	bl	0 <RCC_APB1PeriphResetCmd>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:93
      break;

    default:
      break;
  }
}
  52:	bd0e      	pop	{r1, r2, r3, pc}
  54:	40003c00 	.word	0x40003c00
  58:	40013000 	.word	0x40013000
  5c:	40003800 	.word	0x40003800

Disassembly of section .text.SPI_Init:

00000000 <SPI_Init>:
SPI_Init():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:137
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
   0:	880b      	ldrh	r3, [r1, #0]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:107
*                    SPI peripheral.
* Output         : None
* Return         : None
******************************************************************************/
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
   2:	b510      	push	{r4, lr}
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:137
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
   4:	884c      	ldrh	r4, [r1, #2]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:126
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
   6:	8802      	ldrh	r2, [r0, #0]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:137
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
   8:	ea44 0303 	orr.w	r3, r4, r3
   c:	888c      	ldrh	r4, [r1, #4]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:128

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
   e:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:137
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (u16)((u32)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
  12:	4323      	orrs	r3, r4
  14:	88cc      	ldrh	r4, [r1, #6]
  16:	4323      	orrs	r3, r4
  18:	890c      	ldrh	r4, [r1, #8]
  1a:	4323      	orrs	r3, r4
  1c:	894c      	ldrh	r4, [r1, #10]
  1e:	4323      	orrs	r3, r4
  20:	898c      	ldrh	r4, [r1, #12]
  22:	4323      	orrs	r3, r4
  24:	89cc      	ldrh	r4, [r1, #14]
  26:	4323      	orrs	r3, r4
  28:	ea42 0303 	orr.w	r3, r2, r3
  2c:	b29b      	uxth	r3, r3
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:142
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
  2e:	8003      	strh	r3, [r0, #0]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:145
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
  30:	8b83      	ldrh	r3, [r0, #28]
  32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  36:	041b      	lsls	r3, r3, #16
  38:	0c1b      	lsrs	r3, r3, #16
  3a:	8383      	strh	r3, [r0, #28]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:149

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
  3c:	8a0b      	ldrh	r3, [r1, #16]
  3e:	8203      	strh	r3, [r0, #16]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:150
}
  40:	bd10      	pop	{r4, pc}

Disassembly of section .text.I2S_Init:

00000000 <I2S_Init>:
I2S_Init():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:165
*                    SPI peripheral configured in I2S mode.
* Output         : None
* Return         : None
******************************************************************************/
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
   0:	b5f0      	push	{r4, r5, r6, r7, lr}
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:182
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
   2:	8b83      	ldrh	r3, [r0, #28]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:165
*                    SPI peripheral configured in I2S mode.
* Output         : None
* Return         : None
******************************************************************************/
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
   4:	b087      	sub	sp, #28
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:182
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
   6:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
   a:	f023 031f 	bic.w	r3, r3, #31
   e:	041b      	lsls	r3, r3, #16
  10:	0c1b      	lsrs	r3, r3, #16
  12:	8383      	strh	r3, [r0, #28]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:183
  SPIx->I2SPR = 0x0002;
  14:	2302      	movs	r3, #2
  16:	8403      	strh	r3, [r0, #32]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:189
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  18:	890b      	ldrh	r3, [r1, #8]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:186
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  1a:	8b86      	ldrh	r6, [r0, #28]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:189
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  1c:	2b02      	cmp	r3, #2
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:165
*                    SPI peripheral configured in I2S mode.
* Output         : None
* Return         : None
******************************************************************************/
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
  1e:	4604      	mov	r4, r0
  20:	460d      	mov	r5, r1
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:186
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  22:	b2b6      	uxth	r6, r6
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:189
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  24:	d025      	beq.n	72 <I2S_Init+0x72>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:209
    {
      /* Packet length is 32 bits */
      packetlength = 2;
    }
    /* Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);
  26:	a801      	add	r0, sp, #4
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:198
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
  28:	888f      	ldrh	r7, [r1, #4]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:209
    {
      /* Packet length is 32 bits */
      packetlength = 2;
    }
    /* Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);
  2a:	f7ff fffe 	bl	0 <RCC_GetClocksFreq>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:212
    
    /* Compute the Real divider depending on the MCLK output state with a flaoting point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
  2e:	88eb      	ldrh	r3, [r5, #6]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:201
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
  30:	2f00      	cmp	r7, #0
  32:	bf14      	ite	ne
  34:	2702      	movne	r7, #2
  36:	2701      	moveq	r7, #1
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:212
    }
    /* Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);
    
    /* Compute the Real divider depending on the MCLK output state with a flaoting point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
  38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  3c:	892a      	ldrh	r2, [r5, #8]
  3e:	9b01      	ldr	r3, [sp, #4]
  40:	f04f 010a 	mov.w	r1, #10
  44:	d104      	bne.n	50 <I2S_Init+0x50>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:215
    {
      /* MCLK output is enabled */
      tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (256 * I2S_InitStruct->I2S_AudioFreq)) + 5);
  46:	434b      	muls	r3, r1
  48:	0212      	lsls	r2, r2, #8
  4a:	fbb3 f3f2 	udiv	r3, r3, r2
  4e:	e004      	b.n	5a <I2S_Init+0x5a>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:220
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (32 * packetlength * I2S_InitStruct->I2S_AudioFreq)) + 5);
  50:	0152      	lsls	r2, r2, #5
  52:	434b      	muls	r3, r1
  54:	4357      	muls	r7, r2
  56:	fbb3 f3f7 	udiv	r3, r3, r7
  5a:	3305      	adds	r3, #5
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:224
    }
    
    /* Remove the flaoting point */
    tmp = tmp/10;  
  5c:	220a      	movs	r2, #10
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:220
      tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (256 * I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (u16)(((10 * RCC_Clocks.SYSCLK_Frequency) / (32 * packetlength * I2S_InitStruct->I2S_AudioFreq)) + 5);
  5e:	b29b      	uxth	r3, r3
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:224
    }
    
    /* Remove the flaoting point */
    tmp = tmp/10;  
  60:	fbb3 f3f2 	udiv	r3, r3, r2
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:230
      
    /* Check the parity of the divider */
    i2sodd = (u16)(tmp & (u16)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (u16)((tmp - i2sodd) / 2);
  64:	f003 0201 	and.w	r2, r3, #1
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:233
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (u16) (i2sodd << 8);
  68:	0212      	lsls	r2, r2, #8
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:230
      
    /* Check the parity of the divider */
    i2sodd = (u16)(tmp & (u16)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (u16)((tmp - i2sodd) / 2);
  6a:	085b      	lsrs	r3, r3, #1
  6c:	b29b      	uxth	r3, r3
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:233
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (u16) (i2sodd << 8);
  6e:	b292      	uxth	r2, r2
  70:	e000      	b.n	74 <I2S_Init+0x74>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:191
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (u16)0;
  72:	2200      	movs	r2, #0
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:237
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (u16) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  74:	1e99      	subs	r1, r3, #2
  76:	b289      	uxth	r1, r1
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:241
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
  78:	29fe      	cmp	r1, #254	; 0xfe
  7a:	bf28      	it	cs
  7c:	2200      	movcs	r2, #0
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:245
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (u16)(i2sdiv | i2sodd | I2S_InitStruct->I2S_MCLKOutput);  
  7e:	88e9      	ldrh	r1, [r5, #6]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:241
  /* Test if the divider is 1 or 0 */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
  80:	bf28      	it	cs
  82:	2302      	movcs	r3, #2
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:245
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (u16)(i2sdiv | i2sodd | I2S_InitStruct->I2S_MCLKOutput);  
  84:	4313      	orrs	r3, r2
  86:	430b      	orrs	r3, r1
  88:	b29b      	uxth	r3, r3
  8a:	8423      	strh	r3, [r4, #32]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:248
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (u16)(I2S_Mode_Select | I2S_InitStruct->I2S_Mode | \
  8c:	882b      	ldrh	r3, [r5, #0]
  8e:	886a      	ldrh	r2, [r5, #2]
  90:	ea46 0303 	orr.w	r3, r6, r3
  94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  98:	4313      	orrs	r3, r2
  9a:	88aa      	ldrh	r2, [r5, #4]
  9c:	4313      	orrs	r3, r2
  9e:	896a      	ldrh	r2, [r5, #10]
  a0:	4313      	orrs	r3, r2
  a2:	b29b      	uxth	r3, r3
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:253
                  I2S_InitStruct->I2S_Standard | I2S_InitStruct->I2S_DataFormat | \
                  I2S_InitStruct->I2S_CPOL);
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;                                    
  a4:	83a3      	strh	r3, [r4, #28]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:254
}
  a6:	b007      	add	sp, #28
  a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .text.SPI_StructInit:

00000000 <SPI_StructInit>:
SPI_StructInit():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:268
*******************************************************************************/
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   0:	2300      	movs	r3, #0
   2:	8003      	strh	r3, [r0, #0]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:271

  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
   4:	8043      	strh	r3, [r0, #2]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:274

  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
   6:	8083      	strh	r3, [r0, #4]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:277

  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
   8:	80c3      	strh	r3, [r0, #6]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:280

  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
   a:	8103      	strh	r3, [r0, #8]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:283

  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
   c:	8143      	strh	r3, [r0, #10]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:286

  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
   e:	8183      	strh	r3, [r0, #12]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:289

  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
  10:	81c3      	strh	r3, [r0, #14]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:292

  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
  12:	2307      	movs	r3, #7
  14:	8203      	strh	r3, [r0, #16]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:293
}
  16:	4770      	bx	lr

Disassembly of section .text.I2S_StructInit:

00000000 <I2S_StructInit>:
I2S_StructInit():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:307
*******************************************************************************/
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
   0:	2300      	movs	r3, #0
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:319
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
   2:	2202      	movs	r2, #2
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:307
*******************************************************************************/
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
   4:	8003      	strh	r3, [r0, #0]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:310
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
   6:	8043      	strh	r3, [r0, #2]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:313
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
   8:	8083      	strh	r3, [r0, #4]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:316
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
   a:	80c3      	strh	r3, [r0, #6]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:319
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
   c:	8102      	strh	r2, [r0, #8]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:322
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
   e:	8143      	strh	r3, [r0, #10]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:323
}
  10:	4770      	bx	lr

Disassembly of section .text.SPI_Cmd:

00000000 <SPI_Cmd>:
SPI_Cmd():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:340
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <SPI_Cmd+0xc>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:343
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a:	e004      	b.n	16 <SPI_Cmd+0x16>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:348
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8003      	strh	r3, [r0, #0]
  18:	4770      	bx	lr

Disassembly of section .text.I2S_Cmd:

00000000 <I2S_Cmd>:
I2S_Cmd():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:367
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <I2S_Cmd+0xc>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:370
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
   2:	8b83      	ldrh	r3, [r0, #28]
   4:	b29b      	uxth	r3, r3
   6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   a:	e004      	b.n	16 <I2S_Cmd+0x16>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:375
  }
  else
  {
    /* Disable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
   c:	8b83      	ldrh	r3, [r0, #28]
   e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8383      	strh	r3, [r0, #28]
  18:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_ITConfig:

00000000 <SPI_I2S_ITConfig>:
SPI_I2S_ITConfig():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:408
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;
  /* Set the IT mask */
  itmask = (u16)((u16)1 << itpos);
   0:	0909      	lsrs	r1, r1, #4
   2:	2301      	movs	r3, #1
   4:	408b      	lsls	r3, r1
   6:	b29b      	uxth	r3, r3
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:410

  if (NewState != DISABLE)
   8:	b11a      	cbz	r2, 12 <SPI_I2S_ITConfig+0x12>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:413
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
   a:	8882      	ldrh	r2, [r0, #4]
   c:	b292      	uxth	r2, r2
   e:	4313      	orrs	r3, r2
  10:	e003      	b.n	1a <SPI_I2S_ITConfig+0x1a>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:418
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (u16)~itmask;
  12:	8882      	ldrh	r2, [r0, #4]
  14:	b292      	uxth	r2, r2
  16:	ea22 0303 	bic.w	r3, r2, r3
  1a:	8083      	strh	r3, [r0, #4]
  1c:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_DMACmd:

00000000 <SPI_I2S_DMACmd>:
SPI_I2S_DMACmd():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:446
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
   0:	b11a      	cbz	r2, a <SPI_I2S_DMACmd+0xa>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:449
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	4319      	orrs	r1, r3
   8:	e003      	b.n	12 <SPI_I2S_DMACmd+0x12>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:454
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (u16)~SPI_I2S_DMAReq;
   a:	8883      	ldrh	r3, [r0, #4]
   c:	b29b      	uxth	r3, r3
   e:	ea23 0101 	bic.w	r1, r3, r1
  12:	8081      	strh	r1, [r0, #4]
  14:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_SendData:

00000000 <SPI_I2S_SendData>:
SPI_I2S_SendData():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:474
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
   0:	8181      	strh	r1, [r0, #12]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:475
}
   2:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_ReceiveData:

00000000 <SPI_I2S_ReceiveData>:
SPI_I2S_ReceiveData():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:492
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
   0:	8980      	ldrh	r0, [r0, #12]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:493
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr

Disassembly of section .text.SPI_NSSInternalSoftwareConfig:

00000000 <SPI_NSSInternalSoftwareConfig>:
SPI_NSSInternalSoftwareConfig():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:513
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));

  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
   0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
   4:	4299      	cmp	r1, r3
   6:	d004      	beq.n	12 <SPI_NSSInternalSoftwareConfig+0x12>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:516
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
   8:	8803      	ldrh	r3, [r0, #0]
   a:	b29b      	uxth	r3, r3
   c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  10:	e004      	b.n	1c <SPI_NSSInternalSoftwareConfig+0x1c>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:521
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  12:	8803      	ldrh	r3, [r0, #0]
  14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  18:	041b      	lsls	r3, r3, #16
  1a:	0c1b      	lsrs	r3, r3, #16
  1c:	8003      	strh	r3, [r0, #0]
  1e:	4770      	bx	lr

Disassembly of section .text.SPI_SSOutputCmd:

00000000 <SPI_SSOutputCmd>:
SPI_SSOutputCmd():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:540
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <SPI_SSOutputCmd+0xc>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:543
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
   2:	8883      	ldrh	r3, [r0, #4]
   4:	b29b      	uxth	r3, r3
   6:	f043 0304 	orr.w	r3, r3, #4
   a:	e004      	b.n	16 <SPI_SSOutputCmd+0x16>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:548
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
   c:	8883      	ldrh	r3, [r0, #4]
   e:	f023 0304 	bic.w	r3, r3, #4
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8083      	strh	r3, [r0, #4]
  18:	4770      	bx	lr

Disassembly of section .text.SPI_DataSizeConfig:

00000000 <SPI_DataSizeConfig>:
SPI_DataSizeConfig():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:570
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));

  /* Clear DFF bit */
  SPIx->CR1 &= (u16)~SPI_DataSize_16b;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   6:	041b      	lsls	r3, r3, #16
   8:	0c1b      	lsrs	r3, r3, #16
   a:	8003      	strh	r3, [r0, #0]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:572
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	b29b      	uxth	r3, r3
  10:	ea41 0303 	orr.w	r3, r1, r3
  14:	8003      	strh	r3, [r0, #0]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:573
}
  16:	4770      	bx	lr

Disassembly of section .text.SPI_TransmitCRC:

00000000 <SPI_TransmitCRC>:
SPI_TransmitCRC():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:588
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= CR1_CRCNext_Set;
   0:	8803      	ldrh	r3, [r0, #0]
   2:	b29b      	uxth	r3, r3
   4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   8:	8003      	strh	r3, [r0, #0]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:589
}
   a:	4770      	bx	lr

Disassembly of section .text.SPI_CalculateCRC:

00000000 <SPI_CalculateCRC>:
SPI_CalculateCRC():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:607
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
   0:	b121      	cbz	r1, c <SPI_CalculateCRC+0xc>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:610
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
   2:	8803      	ldrh	r3, [r0, #0]
   4:	b29b      	uxth	r3, r3
   6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   a:	e004      	b.n	16 <SPI_CalculateCRC+0x16>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:615
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
   c:	8803      	ldrh	r3, [r0, #0]
   e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  12:	041b      	lsls	r3, r3, #16
  14:	0c1b      	lsrs	r3, r3, #16
  16:	8003      	strh	r3, [r0, #0]
  18:	4770      	bx	lr

Disassembly of section .text.SPI_GetCRC:

00000000 <SPI_GetCRC>:
SPI_GetCRC():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:639

  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));

  if (SPI_CRC != SPI_CRC_Rx)
   0:	2901      	cmp	r1, #1
   2:	d002      	beq.n	a <SPI_GetCRC+0xa>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:642
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
   4:	8b00      	ldrh	r0, [r0, #24]
   6:	b280      	uxth	r0, r0
   8:	4770      	bx	lr
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:647
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
   a:	8a80      	ldrh	r0, [r0, #20]
   c:	b280      	uxth	r0, r0
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:652
  }

  /* Return the selected CRC register */
  return crcreg;
}
   e:	4770      	bx	lr

Disassembly of section .text.SPI_GetCRCPolynomial:

00000000 <SPI_GetCRCPolynomial>:
SPI_GetCRCPolynomial():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:667
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
   0:	8a00      	ldrh	r0, [r0, #16]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:668
}
   2:	b280      	uxth	r0, r0
   4:	4770      	bx	lr

Disassembly of section .text.SPI_BiDirectionalLineConfig:

00000000 <SPI_BiDirectionalLineConfig>:
SPI_BiDirectionalLineConfig():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:689
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));

  if (SPI_Direction == SPI_Direction_Tx)
   0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   4:	d104      	bne.n	10 <SPI_BiDirectionalLineConfig+0x10>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:692
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
   6:	8803      	ldrh	r3, [r0, #0]
   8:	b29b      	uxth	r3, r3
   a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   e:	e004      	b.n	1a <SPI_BiDirectionalLineConfig+0x1a>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:697
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
  10:	8803      	ldrh	r3, [r0, #0]
  12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  16:	041b      	lsls	r3, r3, #16
  18:	0c1b      	lsrs	r3, r3, #16
  1a:	8003      	strh	r3, [r0, #0]
  1c:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_GetFlagStatus:

00000000 <SPI_I2S_GetFlagStatus>:
SPI_I2S_GetFlagStatus():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:729
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));

  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (u16)RESET)
   0:	8903      	ldrh	r3, [r0, #8]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:732
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
   2:	4219      	tst	r1, r3
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:741
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_ClearFlag:

00000000 <SPI_I2S_ClearFlag>:
SPI_I2S_ClearFlag():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:772
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (u16)~SPI_I2S_FLAG;
   0:	43c9      	mvns	r1, r1
   2:	b289      	uxth	r1, r1
   4:	8101      	strh	r1, [r0, #8]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:773
}
   6:	4770      	bx	lr

Disassembly of section .text.SPI_I2S_GetITStatus:

00000000 <SPI_I2S_GetITStatus>:
SPI_I2S_GetITStatus():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:802
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
   0:	2301      	movs	r3, #1
   2:	f001 020f 	and.w	r2, r1, #15
   6:	fa13 f202 	lsls.w	r2, r3, r2
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:793
*                       - I2S_IT_UDR: Underrun Error interrupt.
* Output         : None
* Return         : The new state of SPI_I2S_IT (SET or RESET).
*******************************************************************************/
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
{
   a:	b510      	push	{r4, lr}
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:809
  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;
  /* Set the IT mask */
  itmask = (u16)((u16)0x01 << itmask);
  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
   c:	8884      	ldrh	r4, [r0, #4]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:812

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
   e:	8900      	ldrh	r0, [r0, #8]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:809
  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;
  /* Set the IT mask */
  itmask = (u16)((u16)0x01 << itmask);
  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
  10:	b2a4      	uxth	r4, r4
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:812

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
  12:	b280      	uxth	r0, r0
  14:	4010      	ands	r0, r2
  16:	d005      	beq.n	24 <SPI_I2S_GetITStatus+0x24>
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:807
  itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));

  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;
  /* Set the IT mask */
  itmask = (u16)((u16)0x01 << itmask);
  18:	0909      	lsrs	r1, r1, #4
  1a:	408b      	lsls	r3, r1
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:792
*                       - SPI_IT_CRCERR: CRC Error interrupt.
*                       - I2S_IT_UDR: Underrun Error interrupt.
* Output         : None
* Return         : The new state of SPI_I2S_IT (SET or RESET).
*******************************************************************************/
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, u8 SPI_I2S_IT)
  1c:	421c      	tst	r4, r3
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:815

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (u16)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
  1e:	bf0c      	ite	eq
  20:	2000      	moveq	r0, #0
  22:	2001      	movne	r0, #1
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:824
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
  24:	bd10      	pop	{r4, pc}

Disassembly of section .text.SPI_I2S_ClearITPendingBit:

00000000 <SPI_I2S_ClearITPendingBit>:
SPI_I2S_ClearITPendingBit():
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:858
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = (u16)((u16)0x01 << (SPI_I2S_IT & (u8)0x0F));
   0:	f001 010f 	and.w	r1, r1, #15
   4:	2301      	movs	r3, #1
   6:	408b      	lsls	r3, r1
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:860
  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (u16)~itpos;
   8:	43db      	mvns	r3, r3
   a:	b29b      	uxth	r3, r3
   c:	8103      	strh	r3, [r0, #8]
C:\cortex\gateway\stlibrary\src/stm32f10x_spi.c:861
}
   e:	4770      	bx	lr
